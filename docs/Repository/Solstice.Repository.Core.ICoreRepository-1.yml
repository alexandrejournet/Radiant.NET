### YamlMime:ManagedReference
items:
- uid: Solstice.Repository.Core.ICoreRepository`1
  commentId: T:Solstice.Repository.Core.ICoreRepository`1
  id: ICoreRepository`1
  parent: Solstice.Repository.Core
  children:
  - Solstice.Repository.Core.ICoreRepository`1.AddAndSaveAsync(`0)
  - Solstice.Repository.Core.ICoreRepository`1.AddAndSaveAsync``1(``0)
  - Solstice.Repository.Core.ICoreRepository`1.AddAsync(`0)
  - Solstice.Repository.Core.ICoreRepository`1.AddAsync``1(``0)
  - Solstice.Repository.Core.ICoreRepository`1.AddRangeAndSaveAsync(System.Collections.Generic.ICollection{`0})
  - Solstice.Repository.Core.ICoreRepository`1.AddRangeAndSaveAsync``1(System.Collections.Generic.ICollection{``0})
  - Solstice.Repository.Core.ICoreRepository`1.AddRangeAsync(System.Collections.Generic.ICollection{`0})
  - Solstice.Repository.Core.ICoreRepository`1.AddRangeAsync``1(System.Collections.Generic.ICollection{``0})
  - Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy``1(System.Linq.IQueryable{``0})
  - Solstice.Repository.Core.ICoreRepository`1.BeginTransactionAsync
  - Solstice.Repository.Core.ICoreRepository`1.CountAllAsync
  - Solstice.Repository.Core.ICoreRepository`1.CountAllAsyncBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Solstice.Repository.Core.ICoreRepository`1.CountAllAsyncBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - Solstice.Repository.Core.ICoreRepository`1.ExecuteQuery(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  - Solstice.Repository.Core.ICoreRepository`1.FindAsync(System.Int32)
  - Solstice.Repository.Core.ICoreRepository`1.FindAsync``1(System.Int32)
  - Solstice.Repository.Core.ICoreRepository`1.GetAllAsync
  - Solstice.Repository.Core.ICoreRepository`1.GetAllAsync(Solstice.Repository.Specifications.ICoreSpecifications{`0})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllAsync(System.String,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllAsync(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{`0})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1
  - Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(Solstice.Repository.Specifications.ICoreSpecifications{``0})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.String)
  - Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.String,Solstice.Repository.Specifications.ICoreSpecifications{``0})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllByQueryable``1(System.Linq.IQueryable{``0})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable
  - Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable(Solstice.Repository.Specifications.ICoreSpecifications{`0})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable(System.String,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{`0})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1
  - Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1(Solstice.Repository.Specifications.ICoreSpecifications{``0})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1(System.String,Solstice.Repository.Specifications.ICoreSpecifications{``0})
  - Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  - Solstice.Repository.Core.ICoreRepository`1.GetBy(Solstice.Repository.Specifications.ICoreSpecifications{`0})
  - Solstice.Repository.Core.ICoreRepository`1.GetBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Solstice.Repository.Core.ICoreRepository`1.GetBy``1(Solstice.Repository.Specifications.ICoreSpecifications{``0})
  - Solstice.Repository.Core.ICoreRepository`1.GetBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - Solstice.Repository.Core.ICoreRepository`1.GetBy``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  - Solstice.Repository.Core.ICoreRepository`1.GetPagedResult(Solstice.Domain.Models.Page)
  - Solstice.Repository.Core.ICoreRepository`1.GetPagedResult(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  - Solstice.Repository.Core.ICoreRepository`1.GetPagedResult(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  - Solstice.Repository.Core.ICoreRepository`1.GetPagedResult(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{`0})
  - Solstice.Repository.Core.ICoreRepository`1.GetPagedResult``1(Solstice.Domain.Models.Page)
  - Solstice.Repository.Core.ICoreRepository`1.GetPagedResult``1(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{``0})
  - Solstice.Repository.Core.ICoreRepository`1.GetPagedResult``1(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  - Solstice.Repository.Core.ICoreRepository`1.GetPagedResult``1(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  - Solstice.Repository.Core.ICoreRepository`1.PageAllAsync(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  - Solstice.Repository.Core.ICoreRepository`1.PageAllQueryable(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  - Solstice.Repository.Core.ICoreRepository`1.Remove(`0)
  - Solstice.Repository.Core.ICoreRepository`1.RemoveAndSaveAsync(`0)
  - Solstice.Repository.Core.ICoreRepository`1.RemoveAndSaveAsync``1(``0)
  - Solstice.Repository.Core.ICoreRepository`1.RemoveRange(System.Collections.Generic.ICollection{`0})
  - Solstice.Repository.Core.ICoreRepository`1.RemoveRangeAndSaveAsync(System.Collections.Generic.ICollection{`0})
  - Solstice.Repository.Core.ICoreRepository`1.RemoveRangeAndSaveAsync``1(System.Collections.Generic.ICollection{``0})
  - Solstice.Repository.Core.ICoreRepository`1.RemoveRange``1(System.Collections.Generic.ICollection{``0})
  - Solstice.Repository.Core.ICoreRepository`1.Remove``1(``0)
  - Solstice.Repository.Core.ICoreRepository`1.SaveAsync
  - Solstice.Repository.Core.ICoreRepository`1.Update(`0)
  - Solstice.Repository.Core.ICoreRepository`1.UpdateAndSaveAsync(`0)
  - Solstice.Repository.Core.ICoreRepository`1.UpdateAndSaveAsync``1(``0)
  - Solstice.Repository.Core.ICoreRepository`1.UpdateRange(System.Collections.Generic.ICollection{`0})
  - Solstice.Repository.Core.ICoreRepository`1.UpdateRangeAndSaveAsync(System.Collections.Generic.ICollection{`0})
  - Solstice.Repository.Core.ICoreRepository`1.UpdateRangeAndSaveAsync``1(System.Collections.Generic.ICollection{``0})
  - Solstice.Repository.Core.ICoreRepository`1.UpdateRange``1(System.Collections.Generic.ICollection{``0})
  - Solstice.Repository.Core.ICoreRepository`1.Update``1(``0)
  langs:
  - csharp
  - vb
  name: ICoreRepository<T>
  nameWithType: ICoreRepository<T>
  fullName: Solstice.Repository.Core.ICoreRepository<T>
  type: Interface
  source:
    id: ICoreRepository
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 30
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: >-
    The ICoreRepository interface provides methods for performing CRUD operations, querying, counting, paging,

    transactions, and other tasks on an underlying data repository in an asynchronous manner. The repository

    holds objects of a type. The methods in this interface produce

    or consume tasks that represent ongoing work and are used for structuring asynchronous code.
  remarks: >-
    - The methods grouped in the 'Create, Update, Delete' region are for managing entities within the repository.

    - The 'Actions' region contains methods for counting entities in the repository or check its status (AnyAsyncBy).

    - The 'Get By' region provides methods to retrieve an entity by a specific criteria.

    - The 'Get all' region offers APIs to get collections of entities based on different criteria/patterns.

    - In 'Queryable' area, you find methods for searching within the repository, but the operations are not executed
      right away and more criteria can be added later in the operation chain.
    - 'Pageable' region offers the option to receive the data in chunks, good for large data sets to retrieve and
      process in smaller parts.
    - 'Transactions' region provides a mechanism for batch of operations to be executed together and in an atomic manner.

    - 'Others' region provides methods that handle various other tasks not covered by the previously described
      groupings.
  example: []
  syntax:
    content: 'public interface ICoreRepository<T> where T : class'
    typeParameters:
    - id: T
      description: >-
        A type parameter. This type parameter is used to
             define the type of objects managed by the repository.
    content.vb: Public Interface ICoreRepository(Of T As Class)
  nameWithType.vb: ICoreRepository(Of T)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T)
  name.vb: ICoreRepository(Of T)
- uid: Solstice.Repository.Core.ICoreRepository`1.AddAsync(`0)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.AddAsync(`0)
  id: AddAsync(`0)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: AddAsync(T)
  nameWithType: ICoreRepository<T>.AddAsync(T)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AddAsync(T)
  type: Method
  source:
    id: AddAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 39
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Add entity to repository
  example: []
  syntax:
    content: Task AddAsync(T entity)
    parameters:
    - id: entity
      type: '{T}'
      description: The entity object
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function AddAsync(entity As T) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.AddAsync*
  nameWithType.vb: ICoreRepository(Of T).AddAsync(T)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AddAsync(T)
- uid: Solstice.Repository.Core.ICoreRepository`1.AddAsync``1(``0)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.AddAsync``1(``0)
  id: AddAsync``1(``0)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: AddAsync<TEntity>(TEntity)
  nameWithType: ICoreRepository<T>.AddAsync<TEntity>(TEntity)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AddAsync<TEntity>(TEntity)
  type: Method
  source:
    id: AddAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 40
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task AddAsync<TEntity>(TEntity entity) where TEntity : class'
    parameters:
    - id: entity
      type: '{TEntity}'
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function AddAsync(Of TEntity As Class)(entity As TEntity) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.AddAsync*
  nameWithType.vb: ICoreRepository(Of T).AddAsync(Of TEntity)(TEntity)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AddAsync(Of TEntity)(TEntity)
  name.vb: AddAsync(Of TEntity)(TEntity)
- uid: Solstice.Repository.Core.ICoreRepository`1.AddAndSaveAsync(`0)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.AddAndSaveAsync(`0)
  id: AddAndSaveAsync(`0)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: AddAndSaveAsync(T)
  nameWithType: ICoreRepository<T>.AddAndSaveAsync(T)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AddAndSaveAsync(T)
  type: Method
  source:
    id: AddAndSaveAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 41
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: Task AddAndSaveAsync(T entity)
    parameters:
    - id: entity
      type: '{T}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function AddAndSaveAsync(entity As T) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.AddAndSaveAsync*
  nameWithType.vb: ICoreRepository(Of T).AddAndSaveAsync(T)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AddAndSaveAsync(T)
- uid: Solstice.Repository.Core.ICoreRepository`1.AddAndSaveAsync``1(``0)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.AddAndSaveAsync``1(``0)
  id: AddAndSaveAsync``1(``0)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: AddAndSaveAsync<TEntity>(TEntity)
  nameWithType: ICoreRepository<T>.AddAndSaveAsync<TEntity>(TEntity)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AddAndSaveAsync<TEntity>(TEntity)
  type: Method
  source:
    id: AddAndSaveAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 42
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task AddAndSaveAsync<TEntity>(TEntity entity) where TEntity : class'
    parameters:
    - id: entity
      type: '{TEntity}'
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function AddAndSaveAsync(Of TEntity As Class)(entity As TEntity) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.AddAndSaveAsync*
  nameWithType.vb: ICoreRepository(Of T).AddAndSaveAsync(Of TEntity)(TEntity)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AddAndSaveAsync(Of TEntity)(TEntity)
  name.vb: AddAndSaveAsync(Of TEntity)(TEntity)
- uid: Solstice.Repository.Core.ICoreRepository`1.AddRangeAsync(System.Collections.Generic.ICollection{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.AddRangeAsync(System.Collections.Generic.ICollection{`0})
  id: AddRangeAsync(System.Collections.Generic.ICollection{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: AddRangeAsync(ICollection<T>)
  nameWithType: ICoreRepository<T>.AddRangeAsync(ICollection<T>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AddRangeAsync(System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    id: AddRangeAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 49
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Add range of entities to repository
  example: []
  syntax:
    content: Task AddRangeAsync(ICollection<T> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.ICollection{{T}}
      description: The entities list
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function AddRangeAsync(entities As ICollection(Of T)) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.AddRangeAsync*
  nameWithType.vb: ICoreRepository(Of T).AddRangeAsync(ICollection(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AddRangeAsync(System.Collections.Generic.ICollection(Of T))
  name.vb: AddRangeAsync(ICollection(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.AddRangeAsync``1(System.Collections.Generic.ICollection{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.AddRangeAsync``1(System.Collections.Generic.ICollection{``0})
  id: AddRangeAsync``1(System.Collections.Generic.ICollection{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: AddRangeAsync<TEntity>(ICollection<TEntity>)
  nameWithType: ICoreRepository<T>.AddRangeAsync<TEntity>(ICollection<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AddRangeAsync<TEntity>(System.Collections.Generic.ICollection<TEntity>)
  type: Method
  source:
    id: AddRangeAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 50
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task AddRangeAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class'
    parameters:
    - id: entities
      type: System.Collections.Generic.ICollection{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function AddRangeAsync(Of TEntity As Class)(entities As ICollection(Of TEntity)) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.AddRangeAsync*
  nameWithType.vb: ICoreRepository(Of T).AddRangeAsync(Of TEntity)(ICollection(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AddRangeAsync(Of TEntity)(System.Collections.Generic.ICollection(Of TEntity))
  name.vb: AddRangeAsync(Of TEntity)(ICollection(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.AddRangeAndSaveAsync(System.Collections.Generic.ICollection{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.AddRangeAndSaveAsync(System.Collections.Generic.ICollection{`0})
  id: AddRangeAndSaveAsync(System.Collections.Generic.ICollection{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: AddRangeAndSaveAsync(ICollection<T>)
  nameWithType: ICoreRepository<T>.AddRangeAndSaveAsync(ICollection<T>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AddRangeAndSaveAsync(System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    id: AddRangeAndSaveAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 51
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: Task AddRangeAndSaveAsync(ICollection<T> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.ICollection{{T}}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function AddRangeAndSaveAsync(entities As ICollection(Of T)) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.AddRangeAndSaveAsync*
  nameWithType.vb: ICoreRepository(Of T).AddRangeAndSaveAsync(ICollection(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AddRangeAndSaveAsync(System.Collections.Generic.ICollection(Of T))
  name.vb: AddRangeAndSaveAsync(ICollection(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.AddRangeAndSaveAsync``1(System.Collections.Generic.ICollection{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.AddRangeAndSaveAsync``1(System.Collections.Generic.ICollection{``0})
  id: AddRangeAndSaveAsync``1(System.Collections.Generic.ICollection{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: AddRangeAndSaveAsync<TEntity>(ICollection<TEntity>)
  nameWithType: ICoreRepository<T>.AddRangeAndSaveAsync<TEntity>(ICollection<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AddRangeAndSaveAsync<TEntity>(System.Collections.Generic.ICollection<TEntity>)
  type: Method
  source:
    id: AddRangeAndSaveAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 52
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task AddRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class'
    parameters:
    - id: entities
      type: System.Collections.Generic.ICollection{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function AddRangeAndSaveAsync(Of TEntity As Class)(entities As ICollection(Of TEntity)) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.AddRangeAndSaveAsync*
  nameWithType.vb: ICoreRepository(Of T).AddRangeAndSaveAsync(Of TEntity)(ICollection(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AddRangeAndSaveAsync(Of TEntity)(System.Collections.Generic.ICollection(Of TEntity))
  name.vb: AddRangeAndSaveAsync(Of TEntity)(ICollection(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.Remove(`0)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.Remove(`0)
  id: Remove(`0)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: ICoreRepository<T>.Remove(T)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.Remove(T)
  type: Method
  source:
    id: Remove
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 59
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Remove entity from repository
  example: []
  syntax:
    content: void Remove(T entity)
    parameters:
    - id: entity
      type: '{T}'
      description: The entity object
    content.vb: Sub Remove(entity As T)
  overload: Solstice.Repository.Core.ICoreRepository`1.Remove*
  nameWithType.vb: ICoreRepository(Of T).Remove(T)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).Remove(T)
- uid: Solstice.Repository.Core.ICoreRepository`1.Remove``1(``0)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.Remove``1(``0)
  id: Remove``1(``0)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: Remove<TEntity>(TEntity)
  nameWithType: ICoreRepository<T>.Remove<TEntity>(TEntity)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.Remove<TEntity>(TEntity)
  type: Method
  source:
    id: Remove
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 60
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'void Remove<TEntity>(TEntity entity) where TEntity : class'
    parameters:
    - id: entity
      type: '{TEntity}'
    typeParameters:
    - id: TEntity
    content.vb: Sub Remove(Of TEntity As Class)(entity As TEntity)
  overload: Solstice.Repository.Core.ICoreRepository`1.Remove*
  nameWithType.vb: ICoreRepository(Of T).Remove(Of TEntity)(TEntity)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).Remove(Of TEntity)(TEntity)
  name.vb: Remove(Of TEntity)(TEntity)
- uid: Solstice.Repository.Core.ICoreRepository`1.RemoveAndSaveAsync(`0)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.RemoveAndSaveAsync(`0)
  id: RemoveAndSaveAsync(`0)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: RemoveAndSaveAsync(T)
  nameWithType: ICoreRepository<T>.RemoveAndSaveAsync(T)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.RemoveAndSaveAsync(T)
  type: Method
  source:
    id: RemoveAndSaveAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 61
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: Task RemoveAndSaveAsync(T entity)
    parameters:
    - id: entity
      type: '{T}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RemoveAndSaveAsync(entity As T) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.RemoveAndSaveAsync*
  nameWithType.vb: ICoreRepository(Of T).RemoveAndSaveAsync(T)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).RemoveAndSaveAsync(T)
- uid: Solstice.Repository.Core.ICoreRepository`1.RemoveAndSaveAsync``1(``0)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.RemoveAndSaveAsync``1(``0)
  id: RemoveAndSaveAsync``1(``0)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: RemoveAndSaveAsync<TEntity>(TEntity)
  nameWithType: ICoreRepository<T>.RemoveAndSaveAsync<TEntity>(TEntity)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.RemoveAndSaveAsync<TEntity>(TEntity)
  type: Method
  source:
    id: RemoveAndSaveAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 62
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task RemoveAndSaveAsync<TEntity>(TEntity entity) where TEntity : class'
    parameters:
    - id: entity
      type: '{TEntity}'
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RemoveAndSaveAsync(Of TEntity As Class)(entity As TEntity) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.RemoveAndSaveAsync*
  nameWithType.vb: ICoreRepository(Of T).RemoveAndSaveAsync(Of TEntity)(TEntity)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).RemoveAndSaveAsync(Of TEntity)(TEntity)
  name.vb: RemoveAndSaveAsync(Of TEntity)(TEntity)
- uid: Solstice.Repository.Core.ICoreRepository`1.RemoveRange(System.Collections.Generic.ICollection{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.RemoveRange(System.Collections.Generic.ICollection{`0})
  id: RemoveRange(System.Collections.Generic.ICollection{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: RemoveRange(ICollection<T>)
  nameWithType: ICoreRepository<T>.RemoveRange(ICollection<T>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.RemoveRange(System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    id: RemoveRange
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 68
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Remove range of entities from repository
  example: []
  syntax:
    content: void RemoveRange(ICollection<T> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.ICollection{{T}}
      description: The entities list
    content.vb: Sub RemoveRange(entities As ICollection(Of T))
  overload: Solstice.Repository.Core.ICoreRepository`1.RemoveRange*
  nameWithType.vb: ICoreRepository(Of T).RemoveRange(ICollection(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).RemoveRange(System.Collections.Generic.ICollection(Of T))
  name.vb: RemoveRange(ICollection(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.RemoveRange``1(System.Collections.Generic.ICollection{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.RemoveRange``1(System.Collections.Generic.ICollection{``0})
  id: RemoveRange``1(System.Collections.Generic.ICollection{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: RemoveRange<TEntity>(ICollection<TEntity>)
  nameWithType: ICoreRepository<T>.RemoveRange<TEntity>(ICollection<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.RemoveRange<TEntity>(System.Collections.Generic.ICollection<TEntity>)
  type: Method
  source:
    id: RemoveRange
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 69
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'void RemoveRange<TEntity>(ICollection<TEntity> entities) where TEntity : class'
    parameters:
    - id: entities
      type: System.Collections.Generic.ICollection{{TEntity}}
    typeParameters:
    - id: TEntity
    content.vb: Sub RemoveRange(Of TEntity As Class)(entities As ICollection(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.RemoveRange*
  nameWithType.vb: ICoreRepository(Of T).RemoveRange(Of TEntity)(ICollection(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).RemoveRange(Of TEntity)(System.Collections.Generic.ICollection(Of TEntity))
  name.vb: RemoveRange(Of TEntity)(ICollection(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.RemoveRangeAndSaveAsync(System.Collections.Generic.ICollection{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.RemoveRangeAndSaveAsync(System.Collections.Generic.ICollection{`0})
  id: RemoveRangeAndSaveAsync(System.Collections.Generic.ICollection{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: RemoveRangeAndSaveAsync(ICollection<T>)
  nameWithType: ICoreRepository<T>.RemoveRangeAndSaveAsync(ICollection<T>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.RemoveRangeAndSaveAsync(System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    id: RemoveRangeAndSaveAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 70
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: Task RemoveRangeAndSaveAsync(ICollection<T> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.ICollection{{T}}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RemoveRangeAndSaveAsync(entities As ICollection(Of T)) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.RemoveRangeAndSaveAsync*
  nameWithType.vb: ICoreRepository(Of T).RemoveRangeAndSaveAsync(ICollection(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).RemoveRangeAndSaveAsync(System.Collections.Generic.ICollection(Of T))
  name.vb: RemoveRangeAndSaveAsync(ICollection(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.RemoveRangeAndSaveAsync``1(System.Collections.Generic.ICollection{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.RemoveRangeAndSaveAsync``1(System.Collections.Generic.ICollection{``0})
  id: RemoveRangeAndSaveAsync``1(System.Collections.Generic.ICollection{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity>)
  nameWithType: ICoreRepository<T>.RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.RemoveRangeAndSaveAsync<TEntity>(System.Collections.Generic.ICollection<TEntity>)
  type: Method
  source:
    id: RemoveRangeAndSaveAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 71
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task RemoveRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class'
    parameters:
    - id: entities
      type: System.Collections.Generic.ICollection{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RemoveRangeAndSaveAsync(Of TEntity As Class)(entities As ICollection(Of TEntity)) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.RemoveRangeAndSaveAsync*
  nameWithType.vb: ICoreRepository(Of T).RemoveRangeAndSaveAsync(Of TEntity)(ICollection(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).RemoveRangeAndSaveAsync(Of TEntity)(System.Collections.Generic.ICollection(Of TEntity))
  name.vb: RemoveRangeAndSaveAsync(Of TEntity)(ICollection(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.SaveAsync
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.SaveAsync
  id: SaveAsync
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: SaveAsync()
  nameWithType: ICoreRepository<T>.SaveAsync()
  fullName: Solstice.Repository.Core.ICoreRepository<T>.SaveAsync()
  type: Method
  source:
    id: SaveAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 76
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Save changes in repository
  example: []
  syntax:
    content: Task SaveAsync()
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SaveAsync() As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.SaveAsync*
  nameWithType.vb: ICoreRepository(Of T).SaveAsync()
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).SaveAsync()
- uid: Solstice.Repository.Core.ICoreRepository`1.Update(`0)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.Update(`0)
  id: Update(`0)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: Update(T)
  nameWithType: ICoreRepository<T>.Update(T)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.Update(T)
  type: Method
  source:
    id: Update
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 82
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Update entity in repository
  example: []
  syntax:
    content: void Update(T entity)
    parameters:
    - id: entity
      type: '{T}'
      description: The entity object
    content.vb: Sub Update(entity As T)
  overload: Solstice.Repository.Core.ICoreRepository`1.Update*
  nameWithType.vb: ICoreRepository(Of T).Update(T)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).Update(T)
- uid: Solstice.Repository.Core.ICoreRepository`1.Update``1(``0)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.Update``1(``0)
  id: Update``1(``0)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: Update<TEntity>(TEntity)
  nameWithType: ICoreRepository<T>.Update<TEntity>(TEntity)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.Update<TEntity>(TEntity)
  type: Method
  source:
    id: Update
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 83
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'void Update<TEntity>(TEntity entity) where TEntity : class'
    parameters:
    - id: entity
      type: '{TEntity}'
    typeParameters:
    - id: TEntity
    content.vb: Sub Update(Of TEntity As Class)(entity As TEntity)
  overload: Solstice.Repository.Core.ICoreRepository`1.Update*
  nameWithType.vb: ICoreRepository(Of T).Update(Of TEntity)(TEntity)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).Update(Of TEntity)(TEntity)
  name.vb: Update(Of TEntity)(TEntity)
- uid: Solstice.Repository.Core.ICoreRepository`1.UpdateAndSaveAsync(`0)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.UpdateAndSaveAsync(`0)
  id: UpdateAndSaveAsync(`0)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: UpdateAndSaveAsync(T)
  nameWithType: ICoreRepository<T>.UpdateAndSaveAsync(T)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.UpdateAndSaveAsync(T)
  type: Method
  source:
    id: UpdateAndSaveAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 84
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: Task UpdateAndSaveAsync(T entity)
    parameters:
    - id: entity
      type: '{T}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function UpdateAndSaveAsync(entity As T) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.UpdateAndSaveAsync*
  nameWithType.vb: ICoreRepository(Of T).UpdateAndSaveAsync(T)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).UpdateAndSaveAsync(T)
- uid: Solstice.Repository.Core.ICoreRepository`1.UpdateAndSaveAsync``1(``0)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.UpdateAndSaveAsync``1(``0)
  id: UpdateAndSaveAsync``1(``0)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: UpdateAndSaveAsync<TEntity>(TEntity)
  nameWithType: ICoreRepository<T>.UpdateAndSaveAsync<TEntity>(TEntity)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.UpdateAndSaveAsync<TEntity>(TEntity)
  type: Method
  source:
    id: UpdateAndSaveAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 85
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task UpdateAndSaveAsync<TEntity>(TEntity entity) where TEntity : class'
    parameters:
    - id: entity
      type: '{TEntity}'
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function UpdateAndSaveAsync(Of TEntity As Class)(entity As TEntity) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.UpdateAndSaveAsync*
  nameWithType.vb: ICoreRepository(Of T).UpdateAndSaveAsync(Of TEntity)(TEntity)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).UpdateAndSaveAsync(Of TEntity)(TEntity)
  name.vb: UpdateAndSaveAsync(Of TEntity)(TEntity)
- uid: Solstice.Repository.Core.ICoreRepository`1.UpdateRange(System.Collections.Generic.ICollection{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.UpdateRange(System.Collections.Generic.ICollection{`0})
  id: UpdateRange(System.Collections.Generic.ICollection{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: UpdateRange(ICollection<T>)
  nameWithType: ICoreRepository<T>.UpdateRange(ICollection<T>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.UpdateRange(System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    id: UpdateRange
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 92
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Update range of entities in repository
  example: []
  syntax:
    content: void UpdateRange(ICollection<T> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.ICollection{{T}}
      description: The entities list
    content.vb: Sub UpdateRange(entities As ICollection(Of T))
  overload: Solstice.Repository.Core.ICoreRepository`1.UpdateRange*
  nameWithType.vb: ICoreRepository(Of T).UpdateRange(ICollection(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).UpdateRange(System.Collections.Generic.ICollection(Of T))
  name.vb: UpdateRange(ICollection(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.UpdateRange``1(System.Collections.Generic.ICollection{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.UpdateRange``1(System.Collections.Generic.ICollection{``0})
  id: UpdateRange``1(System.Collections.Generic.ICollection{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: UpdateRange<TEntity>(ICollection<TEntity>)
  nameWithType: ICoreRepository<T>.UpdateRange<TEntity>(ICollection<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.UpdateRange<TEntity>(System.Collections.Generic.ICollection<TEntity>)
  type: Method
  source:
    id: UpdateRange
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 93
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'void UpdateRange<TEntity>(ICollection<TEntity> entities) where TEntity : class'
    parameters:
    - id: entities
      type: System.Collections.Generic.ICollection{{TEntity}}
    typeParameters:
    - id: TEntity
    content.vb: Sub UpdateRange(Of TEntity As Class)(entities As ICollection(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.UpdateRange*
  nameWithType.vb: ICoreRepository(Of T).UpdateRange(Of TEntity)(ICollection(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).UpdateRange(Of TEntity)(System.Collections.Generic.ICollection(Of TEntity))
  name.vb: UpdateRange(Of TEntity)(ICollection(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.UpdateRangeAndSaveAsync(System.Collections.Generic.ICollection{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.UpdateRangeAndSaveAsync(System.Collections.Generic.ICollection{`0})
  id: UpdateRangeAndSaveAsync(System.Collections.Generic.ICollection{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: UpdateRangeAndSaveAsync(ICollection<T>)
  nameWithType: ICoreRepository<T>.UpdateRangeAndSaveAsync(ICollection<T>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.UpdateRangeAndSaveAsync(System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    id: UpdateRangeAndSaveAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 94
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: Task UpdateRangeAndSaveAsync(ICollection<T> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.ICollection{{T}}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function UpdateRangeAndSaveAsync(entities As ICollection(Of T)) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.UpdateRangeAndSaveAsync*
  nameWithType.vb: ICoreRepository(Of T).UpdateRangeAndSaveAsync(ICollection(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).UpdateRangeAndSaveAsync(System.Collections.Generic.ICollection(Of T))
  name.vb: UpdateRangeAndSaveAsync(ICollection(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.UpdateRangeAndSaveAsync``1(System.Collections.Generic.ICollection{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.UpdateRangeAndSaveAsync``1(System.Collections.Generic.ICollection{``0})
  id: UpdateRangeAndSaveAsync``1(System.Collections.Generic.ICollection{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity>)
  nameWithType: ICoreRepository<T>.UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.UpdateRangeAndSaveAsync<TEntity>(System.Collections.Generic.ICollection<TEntity>)
  type: Method
  source:
    id: UpdateRangeAndSaveAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 95
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task UpdateRangeAndSaveAsync<TEntity>(ICollection<TEntity> entities) where TEntity : class'
    parameters:
    - id: entities
      type: System.Collections.Generic.ICollection{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function UpdateRangeAndSaveAsync(Of TEntity As Class)(entities As ICollection(Of TEntity)) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.UpdateRangeAndSaveAsync*
  nameWithType.vb: ICoreRepository(Of T).UpdateRangeAndSaveAsync(Of TEntity)(ICollection(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).UpdateRangeAndSaveAsync(Of TEntity)(System.Collections.Generic.ICollection(Of TEntity))
  name.vb: UpdateRangeAndSaveAsync(Of TEntity)(ICollection(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: AnyAsyncBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: AnyAsyncBy(Expression<Func<T, bool>>)
  nameWithType: ICoreRepository<T>.AnyAsyncBy(Expression<Func<T, bool>>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AnyAsyncBy(System.Linq.Expressions.Expression<System.Func<T, bool>>)
  type: Method
  source:
    id: AnyAsyncBy
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 106
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Checks if any entity in the repository matches the provided expression
  example: []
  syntax:
    content: Task<bool> AnyAsyncBy(Expression<Func<T, bool>> where)
    parameters:
    - id: where
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: The expression that describes the condition to match
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if any entity matches the condition, False otherwise
    content.vb: Function AnyAsyncBy(where As Expression(Of Func(Of T, Boolean))) As Task(Of Boolean)
  overload: Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy*
  nameWithType.vb: ICoreRepository(Of T).AnyAsyncBy(Expression(Of Func(Of T, Boolean)))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AnyAsyncBy(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: AnyAsyncBy(Expression(Of Func(Of T, Boolean)))
- uid: Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: AnyAsyncBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>>)
  nameWithType: ICoreRepository<T>.AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AnyAsyncBy<TEntity>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  type: Method
  source:
    id: AnyAsyncBy
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 107
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<bool> AnyAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class'
    parameters:
    - id: where
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function AnyAsyncBy(Of TEntity As Class)(where As Expression(Of Func(Of TEntity, Boolean))) As Task(Of Boolean)
  overload: Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy*
  nameWithType.vb: ICoreRepository(Of T).AnyAsyncBy(Of TEntity)(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AnyAsyncBy(Of TEntity)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  name.vb: AnyAsyncBy(Of TEntity)(Expression(Of Func(Of TEntity, Boolean)))
- uid: Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy``1(System.Linq.IQueryable{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy``1(System.Linq.IQueryable{``0})
  id: AnyAsyncBy``1(System.Linq.IQueryable{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: AnyAsyncBy<TEntity>(IQueryable<TEntity>)
  nameWithType: ICoreRepository<T>.AnyAsyncBy<TEntity>(IQueryable<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AnyAsyncBy<TEntity>(System.Linq.IQueryable<TEntity>)
  type: Method
  source:
    id: AnyAsyncBy
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 108
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<bool> AnyAsyncBy<TEntity>(IQueryable<TEntity> queryable) where TEntity : class'
    parameters:
    - id: queryable
      type: System.Linq.IQueryable{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function AnyAsyncBy(Of TEntity As Class)(queryable As IQueryable(Of TEntity)) As Task(Of Boolean)
  overload: Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy*
  nameWithType.vb: ICoreRepository(Of T).AnyAsyncBy(Of TEntity)(IQueryable(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AnyAsyncBy(Of TEntity)(System.Linq.IQueryable(Of TEntity))
  name.vb: AnyAsyncBy(Of TEntity)(IQueryable(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.CountAllAsync
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.CountAllAsync
  id: CountAllAsync
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: CountAllAsync()
  nameWithType: ICoreRepository<T>.CountAllAsync()
  fullName: Solstice.Repository.Core.ICoreRepository<T>.CountAllAsync()
  type: Method
  source:
    id: CountAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 113
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Counts all entities in repository
  example: []
  syntax:
    content: Task<decimal> CountAllAsync()
    return:
      type: System.Threading.Tasks.Task{System.Decimal}
      description: Total count of all entities
    content.vb: Function CountAllAsync() As Task(Of Decimal)
  overload: Solstice.Repository.Core.ICoreRepository`1.CountAllAsync*
  nameWithType.vb: ICoreRepository(Of T).CountAllAsync()
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).CountAllAsync()
- uid: Solstice.Repository.Core.ICoreRepository`1.CountAllAsyncBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.CountAllAsyncBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: CountAllAsyncBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: CountAllAsyncBy(Expression<Func<T, bool>>)
  nameWithType: ICoreRepository<T>.CountAllAsyncBy(Expression<Func<T, bool>>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.CountAllAsyncBy(System.Linq.Expressions.Expression<System.Func<T, bool>>)
  type: Method
  source:
    id: CountAllAsyncBy
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 120
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Counts the total entities that match the provided expression
  example: []
  syntax:
    content: Task<decimal> CountAllAsyncBy(Expression<Func<T, bool>> where)
    parameters:
    - id: where
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: The expression that describes the condition to match
    return:
      type: System.Threading.Tasks.Task{System.Decimal}
      description: Total matched entities count
    content.vb: Function CountAllAsyncBy(where As Expression(Of Func(Of T, Boolean))) As Task(Of Decimal)
  overload: Solstice.Repository.Core.ICoreRepository`1.CountAllAsyncBy*
  nameWithType.vb: ICoreRepository(Of T).CountAllAsyncBy(Expression(Of Func(Of T, Boolean)))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).CountAllAsyncBy(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: CountAllAsyncBy(Expression(Of Func(Of T, Boolean)))
- uid: Solstice.Repository.Core.ICoreRepository`1.CountAllAsyncBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.CountAllAsyncBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: CountAllAsyncBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>>)
  nameWithType: ICoreRepository<T>.CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.CountAllAsyncBy<TEntity>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  type: Method
  source:
    id: CountAllAsyncBy
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 121
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<decimal> CountAllAsyncBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class'
    parameters:
    - id: where
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Decimal}
    content.vb: Function CountAllAsyncBy(Of TEntity As Class)(where As Expression(Of Func(Of TEntity, Boolean))) As Task(Of Decimal)
  overload: Solstice.Repository.Core.ICoreRepository`1.CountAllAsyncBy*
  nameWithType.vb: ICoreRepository(Of T).CountAllAsyncBy(Of TEntity)(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).CountAllAsyncBy(Of TEntity)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  name.vb: CountAllAsyncBy(Of TEntity)(Expression(Of Func(Of TEntity, Boolean)))
- uid: Solstice.Repository.Core.ICoreRepository`1.FindAsync(System.Int32)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.FindAsync(System.Int32)
  id: FindAsync(System.Int32)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: FindAsync(int)
  nameWithType: ICoreRepository<T>.FindAsync(int)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.FindAsync(int)
  type: Method
  source:
    id: FindAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 122
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: Task<T> FindAsync(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Function FindAsync(id As Integer) As Task(Of T)
  overload: Solstice.Repository.Core.ICoreRepository`1.FindAsync*
  nameWithType.vb: ICoreRepository(Of T).FindAsync(Integer)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).FindAsync(Integer)
  name.vb: FindAsync(Integer)
- uid: Solstice.Repository.Core.ICoreRepository`1.FindAsync``1(System.Int32)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.FindAsync``1(System.Int32)
  id: FindAsync``1(System.Int32)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: FindAsync<TEntity>(int)
  nameWithType: ICoreRepository<T>.FindAsync<TEntity>(int)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.FindAsync<TEntity>(int)
  type: Method
  source:
    id: FindAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 123
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<TEntity> FindAsync<TEntity>(int id) where TEntity : class'
    parameters:
    - id: id
      type: System.Int32
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Function FindAsync(Of TEntity As Class)(id As Integer) As Task(Of TEntity)
  overload: Solstice.Repository.Core.ICoreRepository`1.FindAsync*
  nameWithType.vb: ICoreRepository(Of T).FindAsync(Of TEntity)(Integer)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).FindAsync(Of TEntity)(Integer)
  name.vb: FindAsync(Of TEntity)(Integer)
- uid: Solstice.Repository.Core.ICoreRepository`1.GetBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: GetBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetBy(Expression<Func<T, bool>>)
  nameWithType: ICoreRepository<T>.GetBy(Expression<Func<T, bool>>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetBy(System.Linq.Expressions.Expression<System.Func<T, bool>>)
  type: Method
  source:
    id: GetBy
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 134
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves an entity that matches the specified condition from the repository.
  example: []
  syntax:
    content: Task<T?> GetBy(Expression<Func<T, bool>> where)
    parameters:
    - id: where
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: An expression representing a condition to be matched by entities in the repository.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: A task that represents the asynchronous operation. The task result contains the first matching entity or null if no entity matches the condition.
    content.vb: Function GetBy(where As Expression(Of Func(Of T, Boolean))) As Task(Of T)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetBy*
  nameWithType.vb: ICoreRepository(Of T).GetBy(Expression(Of Func(Of T, Boolean)))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetBy(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: GetBy(Expression(Of Func(Of T, Boolean)))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetBy(Solstice.Repository.Specifications.ICoreSpecifications{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetBy(Solstice.Repository.Specifications.ICoreSpecifications{`0})
  id: GetBy(Solstice.Repository.Specifications.ICoreSpecifications{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetBy(ICoreSpecifications<T>)
  nameWithType: ICoreRepository<T>.GetBy(ICoreSpecifications<T>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetBy(Solstice.Repository.Specifications.ICoreSpecifications<T>)
  type: Method
  source:
    id: GetBy
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 144
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves an entity from the repository that meets the criteria specified by the given Radiant specification.
  example: []
  syntax:
    content: Task<T?> GetBy(ICoreSpecifications<T> coreSpecifications)
    parameters:
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{T}}
      description: The specifications that an entity must meet to be retrieved from the repository.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: >-
        A task that represents the asynchronous operation. The task result is the first entity that satisfies the specified

        Radiant specifications. If no entity satisfies the specifications, the task result is null.
    content.vb: Function GetBy(coreSpecifications As ICoreSpecifications(Of T)) As Task(Of T)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetBy*
  nameWithType.vb: ICoreRepository(Of T).GetBy(ICoreSpecifications(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetBy(Solstice.Repository.Specifications.ICoreSpecifications(Of T))
  name.vb: GetBy(ICoreSpecifications(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: GetBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetBy<TEntity>(Expression<Func<TEntity, bool>>)
  nameWithType: ICoreRepository<T>.GetBy<TEntity>(Expression<Func<TEntity, bool>>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetBy<TEntity>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  type: Method
  source:
    id: GetBy
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 146
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<TEntity?> GetBy<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class'
    parameters:
    - id: where
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Function GetBy(Of TEntity As Class)(where As Expression(Of Func(Of TEntity, Boolean))) As Task(Of TEntity)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetBy*
  nameWithType.vb: ICoreRepository(Of T).GetBy(Of TEntity)(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetBy(Of TEntity)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  name.vb: GetBy(Of TEntity)(Expression(Of Func(Of TEntity, Boolean)))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetBy``1(Solstice.Repository.Specifications.ICoreSpecifications{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetBy``1(Solstice.Repository.Specifications.ICoreSpecifications{``0})
  id: GetBy``1(Solstice.Repository.Specifications.ICoreSpecifications{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetBy<TEntity>(ICoreSpecifications<TEntity>)
  nameWithType: ICoreRepository<T>.GetBy<TEntity>(ICoreSpecifications<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetBy<TEntity>(Solstice.Repository.Specifications.ICoreSpecifications<TEntity>)
  type: Method
  source:
    id: GetBy
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 147
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<TEntity?> GetBy<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class'
    parameters:
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Function GetBy(Of TEntity As Class)(coreSpecifications As ICoreSpecifications(Of TEntity)) As Task(Of TEntity)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetBy*
  nameWithType.vb: ICoreRepository(Of T).GetBy(Of TEntity)(ICoreSpecifications(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetBy(Of TEntity)(Solstice.Repository.Specifications.ICoreSpecifications(Of TEntity))
  name.vb: GetBy(Of TEntity)(ICoreSpecifications(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetBy``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetBy``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  id: GetBy``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetBy<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>)
  nameWithType: ICoreRepository<T>.GetBy<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetBy<TEntity>(string, System.Collections.Generic.ICollection<System.Data.Common.DbParameter>, Solstice.Repository.Specifications.ICoreSpecifications<TEntity>)
  type: Method
  source:
    id: GetBy
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 148
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<TEntity?> GetBy<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class'
    parameters:
    - id: query
      type: System.String
    - id: parameters
      type: System.Collections.Generic.ICollection{System.Data.Common.DbParameter}
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Function GetBy(Of TEntity As Class)(query As String, parameters As ICollection(Of DbParameter), coreSpecifications As ICoreSpecifications(Of TEntity)) As Task(Of TEntity)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetBy*
  nameWithType.vb: ICoreRepository(Of T).GetBy(Of TEntity)(String, ICollection(Of DbParameter), ICoreSpecifications(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetBy(Of TEntity)(String, System.Collections.Generic.ICollection(Of System.Data.Common.DbParameter), Solstice.Repository.Specifications.ICoreSpecifications(Of TEntity))
  name.vb: GetBy(Of TEntity)(String, ICollection(Of DbParameter), ICoreSpecifications(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllAsync
  id: GetAllAsync
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync()
  nameWithType: ICoreRepository<T>.GetAllAsync()
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllAsync()
  type: Method
  source:
    id: GetAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 154
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: Task<ICollection<T>> GetAllAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{T}}}
    content.vb: Function GetAllAsync() As Task(Of ICollection(Of T))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync*
  nameWithType.vb: ICoreRepository(Of T).GetAllAsync()
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllAsync()
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: GetAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync(Expression<Func<T, bool>>)
  nameWithType: ICoreRepository<T>.GetAllAsync(Expression<Func<T, bool>>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllAsync(System.Linq.Expressions.Expression<System.Func<T, bool>>)
  type: Method
  source:
    id: GetAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 161
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves a collection of entities from the repository that satisfy the specified condition asynchronously.
  example: []
  syntax:
    content: Task<ICollection<T>> GetAllAsync(Expression<Func<T, bool>> where)
    parameters:
    - id: where
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: An expression representing a condition to be matched by entities in the repository.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{T}}}
      description: >-
        A task that represents the asynchronous operation. The task result contains a collection of entities satisfying the condition
            or an empty collection if there are no matches.
    content.vb: Function GetAllAsync(where As Expression(Of Func(Of T, Boolean))) As Task(Of ICollection(Of T))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync*
  nameWithType.vb: ICoreRepository(Of T).GetAllAsync(Expression(Of Func(Of T, Boolean)))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllAsync(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: GetAllAsync(Expression(Of Func(Of T, Boolean)))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync(Solstice.Repository.Specifications.ICoreSpecifications{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllAsync(Solstice.Repository.Specifications.ICoreSpecifications{`0})
  id: GetAllAsync(Solstice.Repository.Specifications.ICoreSpecifications{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync(ICoreSpecifications<T>?)
  nameWithType: ICoreRepository<T>.GetAllAsync(ICoreSpecifications<T>?)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllAsync(Solstice.Repository.Specifications.ICoreSpecifications<T>?)
  type: Method
  source:
    id: GetAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 168
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves a collection of all entities from the repository asynchronously.
  example: []
  syntax:
    content: Task<ICollection<T>> GetAllAsync(ICoreSpecifications<T>? coreSpecifications)
    parameters:
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{T}}
      description: The specifications that entities must meet to be retrieved from the repository.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{T}}}
      description: A task that represents the asynchronous operation. The task result contains a collection of entities satisfying The core specifications or an empty collection if no matches.
    content.vb: Function GetAllAsync(coreSpecifications As ICoreSpecifications(Of T)) As Task(Of ICollection(Of T))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync*
  nameWithType.vb: ICoreRepository(Of T).GetAllAsync(ICoreSpecifications(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllAsync(Solstice.Repository.Specifications.ICoreSpecifications(Of T))
  name.vb: GetAllAsync(ICoreSpecifications(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync(System.String,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllAsync(System.String,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  id: GetAllAsync(System.String,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync(string, ICoreSpecifications<T>?)
  nameWithType: ICoreRepository<T>.GetAllAsync(string, ICoreSpecifications<T>?)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllAsync(string, Solstice.Repository.Specifications.ICoreSpecifications<T>?)
  type: Method
  source:
    id: GetAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 176
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves a collection of all entities from the repository asyncronously based on a provided SQL-like query and specifications.
  example: []
  syntax:
    content: Task<ICollection<T>> GetAllAsync(string query, ICoreSpecifications<T>? coreSpecifications)
    parameters:
    - id: query
      type: System.String
      description: A SQL-like query that retrieves entities from the repository.
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{T}}
      description: The specifications that entities must meet to be retrieved from the repository.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{T}}}
      description: A task that represents the asynchronous operation. The task results contains a collection od entities satisfying the query and The core specifications or an empty collection if no matches.
    content.vb: Function GetAllAsync(query As String, coreSpecifications As ICoreSpecifications(Of T)) As Task(Of ICollection(Of T))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync*
  nameWithType.vb: ICoreRepository(Of T).GetAllAsync(String, ICoreSpecifications(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllAsync(String, Solstice.Repository.Specifications.ICoreSpecifications(Of T))
  name.vb: GetAllAsync(String, ICoreSpecifications(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllAsync(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{`0})
  id: GetAllAsync(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync(string, ICollection<DbParameter>, ICoreSpecifications<T>?)
  nameWithType: ICoreRepository<T>.GetAllAsync(string, ICollection<DbParameter>, ICoreSpecifications<T>?)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllAsync(string, System.Collections.Generic.ICollection<System.Data.Common.DbParameter>, Solstice.Repository.Specifications.ICoreSpecifications<T>?)
  type: Method
  source:
    id: GetAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 185
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves a collection of all entities from the repository asyncronously based on a provided SQL-like query, parameters and specifications.
  example: []
  syntax:
    content: Task<ICollection<T>> GetAllAsync(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications)
    parameters:
    - id: query
      type: System.String
      description: A SQL-like query that retrieves entities from the repository.
    - id: parameters
      type: System.Collections.Generic.ICollection{System.Data.Common.DbParameter}
      description: A collection of database parameters used in the query
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{T}}
      description: The specifications that entities must meet to be retrieved from the repository.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{T}}}
      description: A task that represents the asynchronous operation. The task results contains a collection od entities satisfying the query, parameters and The core specifications or an empty collection if no matches.
    content.vb: Function GetAllAsync(query As String, parameters As ICollection(Of DbParameter), coreSpecifications As ICoreSpecifications(Of T)) As Task(Of ICollection(Of T))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync*
  nameWithType.vb: ICoreRepository(Of T).GetAllAsync(String, ICollection(Of DbParameter), ICoreSpecifications(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllAsync(String, System.Collections.Generic.ICollection(Of System.Data.Common.DbParameter), Solstice.Repository.Specifications.ICoreSpecifications(Of T))
  name.vb: GetAllAsync(String, ICollection(Of DbParameter), ICoreSpecifications(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1
  id: GetAllAsync``1
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync<TEntity>()
  nameWithType: ICoreRepository<T>.GetAllAsync<TEntity>()
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllAsync<TEntity>()
  type: Method
  source:
    id: GetAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 188
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<ICollection<TEntity>> GetAllAsync<TEntity>() where TEntity : class'
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{TEntity}}}
    content.vb: Function GetAllAsync(Of TEntity As Class)() As Task(Of ICollection(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync*
  nameWithType.vb: ICoreRepository(Of T).GetAllAsync(Of TEntity)()
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllAsync(Of TEntity)()
  name.vb: GetAllAsync(Of TEntity)()
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(Solstice.Repository.Specifications.ICoreSpecifications{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(Solstice.Repository.Specifications.ICoreSpecifications{``0})
  id: GetAllAsync``1(Solstice.Repository.Specifications.ICoreSpecifications{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync<TEntity>(ICoreSpecifications<TEntity>)
  nameWithType: ICoreRepository<T>.GetAllAsync<TEntity>(ICoreSpecifications<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllAsync<TEntity>(Solstice.Repository.Specifications.ICoreSpecifications<TEntity>)
  type: Method
  source:
    id: GetAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 189
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<ICollection<TEntity>> GetAllAsync<TEntity>(ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class'
    parameters:
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{TEntity}}}
    content.vb: Function GetAllAsync(Of TEntity As Class)(coreSpecifications As ICoreSpecifications(Of TEntity)) As Task(Of ICollection(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync*
  nameWithType.vb: ICoreRepository(Of T).GetAllAsync(Of TEntity)(ICoreSpecifications(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllAsync(Of TEntity)(Solstice.Repository.Specifications.ICoreSpecifications(Of TEntity))
  name.vb: GetAllAsync(Of TEntity)(ICoreSpecifications(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: GetAllAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync<TEntity>(Expression<Func<TEntity, bool>>)
  nameWithType: ICoreRepository<T>.GetAllAsync<TEntity>(Expression<Func<TEntity, bool>>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllAsync<TEntity>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  type: Method
  source:
    id: GetAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 190
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<ICollection<TEntity>> GetAllAsync<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class'
    parameters:
    - id: where
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{TEntity}}}
    content.vb: Function GetAllAsync(Of TEntity As Class)(where As Expression(Of Func(Of TEntity, Boolean))) As Task(Of ICollection(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync*
  nameWithType.vb: ICoreRepository(Of T).GetAllAsync(Of TEntity)(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllAsync(Of TEntity)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  name.vb: GetAllAsync(Of TEntity)(Expression(Of Func(Of TEntity, Boolean)))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.String)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.String)
  id: GetAllAsync``1(System.String)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync<TEntity>(string)
  nameWithType: ICoreRepository<T>.GetAllAsync<TEntity>(string)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllAsync<TEntity>(string)
  type: Method
  source:
    id: GetAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 191
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query) where TEntity : class'
    parameters:
    - id: query
      type: System.String
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{TEntity}}}
    content.vb: Function GetAllAsync(Of TEntity As Class)(query As String) As Task(Of ICollection(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync*
  nameWithType.vb: ICoreRepository(Of T).GetAllAsync(Of TEntity)(String)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllAsync(Of TEntity)(String)
  name.vb: GetAllAsync(Of TEntity)(String)
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.String,Solstice.Repository.Specifications.ICoreSpecifications{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.String,Solstice.Repository.Specifications.ICoreSpecifications{``0})
  id: GetAllAsync``1(System.String,Solstice.Repository.Specifications.ICoreSpecifications{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync<TEntity>(string, ICoreSpecifications<TEntity>)
  nameWithType: ICoreRepository<T>.GetAllAsync<TEntity>(string, ICoreSpecifications<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllAsync<TEntity>(string, Solstice.Repository.Specifications.ICoreSpecifications<TEntity>)
  type: Method
  source:
    id: GetAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 192
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class'
    parameters:
    - id: query
      type: System.String
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{TEntity}}}
    content.vb: Function GetAllAsync(Of TEntity As Class)(query As String, coreSpecifications As ICoreSpecifications(Of TEntity)) As Task(Of ICollection(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync*
  nameWithType.vb: ICoreRepository(Of T).GetAllAsync(Of TEntity)(String, ICoreSpecifications(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllAsync(Of TEntity)(String, Solstice.Repository.Specifications.ICoreSpecifications(Of TEntity))
  name.vb: GetAllAsync(Of TEntity)(String, ICoreSpecifications(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  id: GetAllAsync``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync<TEntity>(string, ICollection<DbParameter>)
  nameWithType: ICoreRepository<T>.GetAllAsync<TEntity>(string, ICollection<DbParameter>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllAsync<TEntity>(string, System.Collections.Generic.ICollection<System.Data.Common.DbParameter>)
  type: Method
  source:
    id: GetAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 193
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters) where TEntity : class'
    parameters:
    - id: query
      type: System.String
    - id: parameters
      type: System.Collections.Generic.ICollection{System.Data.Common.DbParameter}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{TEntity}}}
    content.vb: Function GetAllAsync(Of TEntity As Class)(query As String, parameters As ICollection(Of DbParameter)) As Task(Of ICollection(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync*
  nameWithType.vb: ICoreRepository(Of T).GetAllAsync(Of TEntity)(String, ICollection(Of DbParameter))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllAsync(Of TEntity)(String, System.Collections.Generic.ICollection(Of System.Data.Common.DbParameter))
  name.vb: GetAllAsync(Of TEntity)(String, ICollection(Of DbParameter))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllAsync``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  id: GetAllAsync``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>)
  nameWithType: ICoreRepository<T>.GetAllAsync<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllAsync<TEntity>(string, System.Collections.Generic.ICollection<System.Data.Common.DbParameter>, Solstice.Repository.Specifications.ICoreSpecifications<TEntity>)
  type: Method
  source:
    id: GetAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 194
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<ICollection<TEntity>> GetAllAsync<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class'
    parameters:
    - id: query
      type: System.String
    - id: parameters
      type: System.Collections.Generic.ICollection{System.Data.Common.DbParameter}
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{TEntity}}}
    content.vb: Function GetAllAsync(Of TEntity As Class)(query As String, parameters As ICollection(Of DbParameter), coreSpecifications As ICoreSpecifications(Of TEntity)) As Task(Of ICollection(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync*
  nameWithType.vb: ICoreRepository(Of T).GetAllAsync(Of TEntity)(String, ICollection(Of DbParameter), ICoreSpecifications(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllAsync(Of TEntity)(String, System.Collections.Generic.ICollection(Of System.Data.Common.DbParameter), Solstice.Repository.Specifications.ICoreSpecifications(Of TEntity))
  name.vb: GetAllAsync(Of TEntity)(String, ICollection(Of DbParameter), ICoreSpecifications(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable
  id: GetAllQueryable
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllQueryable()
  nameWithType: ICoreRepository<T>.GetAllQueryable()
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllQueryable()
  type: Method
  source:
    id: GetAllQueryable
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 204
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves all entities from the repository asynchronously.
  example: []
  syntax:
    content: IQueryable<T> GetAllQueryable()
    return:
      type: System.Linq.IQueryable{{T}}
      description: A queryable collection of all entities in the repository.
    content.vb: Function GetAllQueryable() As IQueryable(Of T)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable*
  nameWithType.vb: ICoreRepository(Of T).GetAllQueryable()
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllQueryable()
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: GetAllQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllQueryable(Expression<Func<T, bool>>)
  nameWithType: ICoreRepository<T>.GetAllQueryable(Expression<Func<T, bool>>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllQueryable(System.Linq.Expressions.Expression<System.Func<T, bool>>)
  type: Method
  source:
    id: GetAllQueryable
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 211
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves entities that match the specified condition from the repository asynchronously.
  example: []
  syntax:
    content: IQueryable<T> GetAllQueryable(Expression<Func<T, bool>> where)
    parameters:
    - id: where
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: An expression representing a condition to be matched by entities in the repository.
    return:
      type: System.Linq.IQueryable{{T}}
      description: A queryable collection of entities matching the condition.
    content.vb: Function GetAllQueryable(where As Expression(Of Func(Of T, Boolean))) As IQueryable(Of T)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable*
  nameWithType.vb: ICoreRepository(Of T).GetAllQueryable(Expression(Of Func(Of T, Boolean)))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllQueryable(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: GetAllQueryable(Expression(Of Func(Of T, Boolean)))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable(Solstice.Repository.Specifications.ICoreSpecifications{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable(Solstice.Repository.Specifications.ICoreSpecifications{`0})
  id: GetAllQueryable(Solstice.Repository.Specifications.ICoreSpecifications{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllQueryable(ICoreSpecifications<T>?)
  nameWithType: ICoreRepository<T>.GetAllQueryable(ICoreSpecifications<T>?)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllQueryable(Solstice.Repository.Specifications.ICoreSpecifications<T>?)
  type: Method
  source:
    id: GetAllQueryable
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 218
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves entities that match the specified Radiant specifications from the repository asynchronously.
  example: []
  syntax:
    content: IQueryable<T> GetAllQueryable(ICoreSpecifications<T>? coreSpecifications)
    parameters:
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{T}}
      description: The specifications that entities must meet to be retrieved from the repository.
    return:
      type: System.Linq.IQueryable{{T}}
      description: A queryable collection of entities that satisfy The core specifications.
    content.vb: Function GetAllQueryable(coreSpecifications As ICoreSpecifications(Of T)) As IQueryable(Of T)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable*
  nameWithType.vb: ICoreRepository(Of T).GetAllQueryable(ICoreSpecifications(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllQueryable(Solstice.Repository.Specifications.ICoreSpecifications(Of T))
  name.vb: GetAllQueryable(ICoreSpecifications(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable(System.String,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable(System.String,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  id: GetAllQueryable(System.String,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllQueryable(string, ICoreSpecifications<T>?)
  nameWithType: ICoreRepository<T>.GetAllQueryable(string, ICoreSpecifications<T>?)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllQueryable(string, Solstice.Repository.Specifications.ICoreSpecifications<T>?)
  type: Method
  source:
    id: GetAllQueryable
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 226
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves entities from the repository based on a provided SQL-like query and specifications asynchronously.
  example: []
  syntax:
    content: IQueryable<T> GetAllQueryable(string query, ICoreSpecifications<T>? coreSpecifications)
    parameters:
    - id: query
      type: System.String
      description: A SQL-like query that retrieves entities from the repository.
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{T}}
      description: The specifications that entities must meet to be retrieved from the repository.
    return:
      type: System.Linq.IQueryable{{T}}
      description: A queryable collection of entities satisfying the query and The core specifications.
    content.vb: Function GetAllQueryable(query As String, coreSpecifications As ICoreSpecifications(Of T)) As IQueryable(Of T)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable*
  nameWithType.vb: ICoreRepository(Of T).GetAllQueryable(String, ICoreSpecifications(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllQueryable(String, Solstice.Repository.Specifications.ICoreSpecifications(Of T))
  name.vb: GetAllQueryable(String, ICoreSpecifications(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{`0})
  id: GetAllQueryable(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllQueryable(string, ICollection<DbParameter>, ICoreSpecifications<T>?)
  nameWithType: ICoreRepository<T>.GetAllQueryable(string, ICollection<DbParameter>, ICoreSpecifications<T>?)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllQueryable(string, System.Collections.Generic.ICollection<System.Data.Common.DbParameter>, Solstice.Repository.Specifications.ICoreSpecifications<T>?)
  type: Method
  source:
    id: GetAllQueryable
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 235
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves entities from the repository based on a provided SQL-like query, parameters and specifications asynchronously.
  example: []
  syntax:
    content: IQueryable<T> GetAllQueryable(string query, ICollection<DbParameter> parameters, ICoreSpecifications<T>? coreSpecifications)
    parameters:
    - id: query
      type: System.String
      description: A SQL-like query that retrieves entities from the repository.
    - id: parameters
      type: System.Collections.Generic.ICollection{System.Data.Common.DbParameter}
      description: A collection of database parameters used in the query
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{T}}
      description: The specifications that entities must meet to be retrieved from the repository.
    return:
      type: System.Linq.IQueryable{{T}}
      description: A queryable collection of entities satisfying the query, parameters and The core specifications.
    content.vb: Function GetAllQueryable(query As String, parameters As ICollection(Of DbParameter), coreSpecifications As ICoreSpecifications(Of T)) As IQueryable(Of T)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable*
  nameWithType.vb: ICoreRepository(Of T).GetAllQueryable(String, ICollection(Of DbParameter), ICoreSpecifications(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllQueryable(String, System.Collections.Generic.ICollection(Of System.Data.Common.DbParameter), Solstice.Repository.Specifications.ICoreSpecifications(Of T))
  name.vb: GetAllQueryable(String, ICollection(Of DbParameter), ICoreSpecifications(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1
  id: GetAllQueryable``1
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllQueryable<TEntity>()
  nameWithType: ICoreRepository<T>.GetAllQueryable<TEntity>()
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllQueryable<TEntity>()
  type: Method
  source:
    id: GetAllQueryable
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 242
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves all entities from the repository asynchronously.
  example: []
  syntax:
    content: 'IQueryable<TEntity> GetAllQueryable<TEntity>() where TEntity : class'
    typeParameters:
    - id: TEntity
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: A queryable collection of all entities in the repository.
    content.vb: Function GetAllQueryable(Of TEntity As Class)() As IQueryable(Of TEntity)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable*
  nameWithType.vb: ICoreRepository(Of T).GetAllQueryable(Of TEntity)()
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllQueryable(Of TEntity)()
  name.vb: GetAllQueryable(Of TEntity)()
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: GetAllQueryable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllQueryable<TEntity>(Expression<Func<TEntity, bool>>)
  nameWithType: ICoreRepository<T>.GetAllQueryable<TEntity>(Expression<Func<TEntity, bool>>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllQueryable<TEntity>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  type: Method
  source:
    id: GetAllQueryable
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 249
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves entities that match the specified condition from the repository asynchronously.
  example: []
  syntax:
    content: 'IQueryable<TEntity> GetAllQueryable<TEntity>(Expression<Func<TEntity, bool>> where) where TEntity : class'
    parameters:
    - id: where
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: An expression representing a condition to be matched by entities in the repository.
    typeParameters:
    - id: TEntity
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: A queryable collection of entities matching the condition.
    content.vb: Function GetAllQueryable(Of TEntity As Class)(where As Expression(Of Func(Of TEntity, Boolean))) As IQueryable(Of TEntity)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable*
  nameWithType.vb: ICoreRepository(Of T).GetAllQueryable(Of TEntity)(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllQueryable(Of TEntity)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  name.vb: GetAllQueryable(Of TEntity)(Expression(Of Func(Of TEntity, Boolean)))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1(Solstice.Repository.Specifications.ICoreSpecifications{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1(Solstice.Repository.Specifications.ICoreSpecifications{``0})
  id: GetAllQueryable``1(Solstice.Repository.Specifications.ICoreSpecifications{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllQueryable<TEntity>(ICoreSpecifications<TEntity>?)
  nameWithType: ICoreRepository<T>.GetAllQueryable<TEntity>(ICoreSpecifications<TEntity>?)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllQueryable<TEntity>(Solstice.Repository.Specifications.ICoreSpecifications<TEntity>?)
  type: Method
  source:
    id: GetAllQueryable
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 256
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves entities that match the specified Radiant specifications from the repository asynchronously.
  example: []
  syntax:
    content: 'IQueryable<TEntity> GetAllQueryable<TEntity>(ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class'
    parameters:
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{TEntity}}
      description: The specifications that entities must meet to be retrieved from the repository.
    typeParameters:
    - id: TEntity
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: A queryable collection of entities that satisfy The core specifications.
    content.vb: Function GetAllQueryable(Of TEntity As Class)(coreSpecifications As ICoreSpecifications(Of TEntity)) As IQueryable(Of TEntity)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable*
  nameWithType.vb: ICoreRepository(Of T).GetAllQueryable(Of TEntity)(ICoreSpecifications(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllQueryable(Of TEntity)(Solstice.Repository.Specifications.ICoreSpecifications(Of TEntity))
  name.vb: GetAllQueryable(Of TEntity)(ICoreSpecifications(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1(System.String,Solstice.Repository.Specifications.ICoreSpecifications{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1(System.String,Solstice.Repository.Specifications.ICoreSpecifications{``0})
  id: GetAllQueryable``1(System.String,Solstice.Repository.Specifications.ICoreSpecifications{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllQueryable<TEntity>(string, ICoreSpecifications<TEntity>?)
  nameWithType: ICoreRepository<T>.GetAllQueryable<TEntity>(string, ICoreSpecifications<TEntity>?)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllQueryable<TEntity>(string, Solstice.Repository.Specifications.ICoreSpecifications<TEntity>?)
  type: Method
  source:
    id: GetAllQueryable
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 264
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves entities from the repository based on a provided SQL-like query and specifications asynchronously.
  example: []
  syntax:
    content: 'IQueryable<TEntity> GetAllQueryable<TEntity>(string query, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class'
    parameters:
    - id: query
      type: System.String
      description: A SQL-like query that retrieves entities from the repository.
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{TEntity}}
      description: The specifications that entities must meet to be retrieved from the repository.
    typeParameters:
    - id: TEntity
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: A queryable collection of entities satisfying the query and The core specifications.
    content.vb: Function GetAllQueryable(Of TEntity As Class)(query As String, coreSpecifications As ICoreSpecifications(Of TEntity)) As IQueryable(Of TEntity)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable*
  nameWithType.vb: ICoreRepository(Of T).GetAllQueryable(Of TEntity)(String, ICoreSpecifications(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllQueryable(Of TEntity)(String, Solstice.Repository.Specifications.ICoreSpecifications(Of TEntity))
  name.vb: GetAllQueryable(Of TEntity)(String, ICoreSpecifications(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  id: GetAllQueryable``1(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllQueryable<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>?)
  nameWithType: ICoreRepository<T>.GetAllQueryable<TEntity>(string, ICollection<DbParameter>, ICoreSpecifications<TEntity>?)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllQueryable<TEntity>(string, System.Collections.Generic.ICollection<System.Data.Common.DbParameter>, Solstice.Repository.Specifications.ICoreSpecifications<TEntity>?)
  type: Method
  source:
    id: GetAllQueryable
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 273
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves entities from the repository based on a provided SQL-like query, parameters and specifications asynchronously.
  example: []
  syntax:
    content: 'IQueryable<TEntity> GetAllQueryable<TEntity>(string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity>? coreSpecifications) where TEntity : class'
    parameters:
    - id: query
      type: System.String
      description: A SQL-like query that retrieves entities from the repository.
    - id: parameters
      type: System.Collections.Generic.ICollection{System.Data.Common.DbParameter}
      description: A collection of database parameters used in the query
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{TEntity}}
      description: The specifications that entities must meet to be retrieved from the repository.
    typeParameters:
    - id: TEntity
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: A queryable collection of entities satisfying the query, parameters and The core specifications.
    content.vb: Function GetAllQueryable(Of TEntity As Class)(query As String, parameters As ICollection(Of DbParameter), coreSpecifications As ICoreSpecifications(Of TEntity)) As IQueryable(Of TEntity)
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable*
  nameWithType.vb: ICoreRepository(Of T).GetAllQueryable(Of TEntity)(String, ICollection(Of DbParameter), ICoreSpecifications(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllQueryable(Of TEntity)(String, System.Collections.Generic.ICollection(Of System.Data.Common.DbParameter), Solstice.Repository.Specifications.ICoreSpecifications(Of TEntity))
  name.vb: GetAllQueryable(Of TEntity)(String, ICollection(Of DbParameter), ICoreSpecifications(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult(Solstice.Domain.Models.Page)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetPagedResult(Solstice.Domain.Models.Page)
  id: GetPagedResult(Solstice.Domain.Models.Page)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetPagedResult(Page)
  nameWithType: ICoreRepository<T>.GetPagedResult(Page)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetPagedResult(Solstice.Domain.Models.Page)
  type: Method
  source:
    id: GetPagedResult
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 289
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves a paginated list of entities from the repository that conforms to the specified Radiant page.
  example: []
  syntax:
    content: Task<Paged<T>> GetPagedResult(Page page)
    parameters:
    - id: page
      type: Solstice.Domain.Models.Page
      description: The page number and size of the entities to be retrieved from the repository.
    return:
      type: System.Threading.Tasks.Task{Solstice.Domain.Models.Paged{{T}}}
      description: >-
        A task that represents the asynchronous operation. The task result is a collection of entities that meet The core specifications,

        paginated based on the given Radiant page object. If no entities meet the specifications, the task result is an empty collection.
    content.vb: Function GetPagedResult(page As Page) As Task(Of Paged(Of T))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult*
  nameWithType.vb: ICoreRepository(Of T).GetPagedResult(Page)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetPagedResult(Solstice.Domain.Models.Page)
- uid: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetPagedResult(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  id: GetPagedResult(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetPagedResult(Page, ICoreSpecifications<T>)
  nameWithType: ICoreRepository<T>.GetPagedResult(Page, ICoreSpecifications<T>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetPagedResult(Solstice.Domain.Models.Page, Solstice.Repository.Specifications.ICoreSpecifications<T>)
  type: Method
  source:
    id: GetPagedResult
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 290
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: Task<Paged<T>> GetPagedResult(Page page, ICoreSpecifications<T> coreSpecifications)
    parameters:
    - id: page
      type: Solstice.Domain.Models.Page
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{T}}
    return:
      type: System.Threading.Tasks.Task{Solstice.Domain.Models.Paged{{T}}}
    content.vb: Function GetPagedResult(page As Page, coreSpecifications As ICoreSpecifications(Of T)) As Task(Of Paged(Of T))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult*
  nameWithType.vb: ICoreRepository(Of T).GetPagedResult(Page, ICoreSpecifications(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetPagedResult(Solstice.Domain.Models.Page, Solstice.Repository.Specifications.ICoreSpecifications(Of T))
  name.vb: GetPagedResult(Page, ICoreSpecifications(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetPagedResult(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  id: GetPagedResult(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetPagedResult(Page, string, ICollection<DbParameter>)
  nameWithType: ICoreRepository<T>.GetPagedResult(Page, string, ICollection<DbParameter>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetPagedResult(Solstice.Domain.Models.Page, string, System.Collections.Generic.ICollection<System.Data.Common.DbParameter>)
  type: Method
  source:
    id: GetPagedResult
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 291
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters)
    parameters:
    - id: page
      type: Solstice.Domain.Models.Page
    - id: query
      type: System.String
    - id: parameters
      type: System.Collections.Generic.ICollection{System.Data.Common.DbParameter}
    return:
      type: System.Threading.Tasks.Task{Solstice.Domain.Models.Paged{{T}}}
    content.vb: Function GetPagedResult(page As Page, query As String, parameters As ICollection(Of DbParameter)) As Task(Of Paged(Of T))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult*
  nameWithType.vb: ICoreRepository(Of T).GetPagedResult(Page, String, ICollection(Of DbParameter))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetPagedResult(Solstice.Domain.Models.Page, String, System.Collections.Generic.ICollection(Of System.Data.Common.DbParameter))
  name.vb: GetPagedResult(Page, String, ICollection(Of DbParameter))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetPagedResult(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{`0})
  id: GetPagedResult(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetPagedResult(Page, string, ICollection<DbParameter>, ICoreSpecifications<T>)
  nameWithType: ICoreRepository<T>.GetPagedResult(Page, string, ICollection<DbParameter>, ICoreSpecifications<T>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetPagedResult(Solstice.Domain.Models.Page, string, System.Collections.Generic.ICollection<System.Data.Common.DbParameter>, Solstice.Repository.Specifications.ICoreSpecifications<T>)
  type: Method
  source:
    id: GetPagedResult
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 292
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: Task<Paged<T>> GetPagedResult(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<T> coreSpecifications)
    parameters:
    - id: page
      type: Solstice.Domain.Models.Page
    - id: query
      type: System.String
    - id: parameters
      type: System.Collections.Generic.ICollection{System.Data.Common.DbParameter}
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{T}}
    return:
      type: System.Threading.Tasks.Task{Solstice.Domain.Models.Paged{{T}}}
    content.vb: Function GetPagedResult(page As Page, query As String, parameters As ICollection(Of DbParameter), coreSpecifications As ICoreSpecifications(Of T)) As Task(Of Paged(Of T))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult*
  nameWithType.vb: ICoreRepository(Of T).GetPagedResult(Page, String, ICollection(Of DbParameter), ICoreSpecifications(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetPagedResult(Solstice.Domain.Models.Page, String, System.Collections.Generic.ICollection(Of System.Data.Common.DbParameter), Solstice.Repository.Specifications.ICoreSpecifications(Of T))
  name.vb: GetPagedResult(Page, String, ICollection(Of DbParameter), ICoreSpecifications(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult``1(Solstice.Domain.Models.Page)
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetPagedResult``1(Solstice.Domain.Models.Page)
  id: GetPagedResult``1(Solstice.Domain.Models.Page)
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetPagedResult<TEntity>(Page)
  nameWithType: ICoreRepository<T>.GetPagedResult<TEntity>(Page)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetPagedResult<TEntity>(Solstice.Domain.Models.Page)
  type: Method
  source:
    id: GetPagedResult
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 293
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page) where TEntity : class'
    parameters:
    - id: page
      type: Solstice.Domain.Models.Page
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{Solstice.Domain.Models.Paged{{TEntity}}}
    content.vb: Function GetPagedResult(Of TEntity As Class)(page As Page) As Task(Of Paged(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult*
  nameWithType.vb: ICoreRepository(Of T).GetPagedResult(Of TEntity)(Page)
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetPagedResult(Of TEntity)(Solstice.Domain.Models.Page)
  name.vb: GetPagedResult(Of TEntity)(Page)
- uid: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult``1(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetPagedResult``1(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{``0})
  id: GetPagedResult``1(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetPagedResult<TEntity>(Page, ICoreSpecifications<TEntity>)
  nameWithType: ICoreRepository<T>.GetPagedResult<TEntity>(Page, ICoreSpecifications<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetPagedResult<TEntity>(Solstice.Domain.Models.Page, Solstice.Repository.Specifications.ICoreSpecifications<TEntity>)
  type: Method
  source:
    id: GetPagedResult
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 294
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class'
    parameters:
    - id: page
      type: Solstice.Domain.Models.Page
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{Solstice.Domain.Models.Paged{{TEntity}}}
    content.vb: Function GetPagedResult(Of TEntity As Class)(page As Page, coreSpecifications As ICoreSpecifications(Of TEntity)) As Task(Of Paged(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult*
  nameWithType.vb: ICoreRepository(Of T).GetPagedResult(Of TEntity)(Page, ICoreSpecifications(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetPagedResult(Of TEntity)(Solstice.Domain.Models.Page, Solstice.Repository.Specifications.ICoreSpecifications(Of TEntity))
  name.vb: GetPagedResult(Of TEntity)(Page, ICoreSpecifications(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult``1(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetPagedResult``1(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  id: GetPagedResult``1(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>)
  nameWithType: ICoreRepository<T>.GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetPagedResult<TEntity>(Solstice.Domain.Models.Page, string, System.Collections.Generic.ICollection<System.Data.Common.DbParameter>)
  type: Method
  source:
    id: GetPagedResult
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 295
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters) where TEntity : class'
    parameters:
    - id: page
      type: Solstice.Domain.Models.Page
    - id: query
      type: System.String
    - id: parameters
      type: System.Collections.Generic.ICollection{System.Data.Common.DbParameter}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{Solstice.Domain.Models.Paged{{TEntity}}}
    content.vb: Function GetPagedResult(Of TEntity As Class)(page As Page, query As String, parameters As ICollection(Of DbParameter)) As Task(Of Paged(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult*
  nameWithType.vb: ICoreRepository(Of T).GetPagedResult(Of TEntity)(Page, String, ICollection(Of DbParameter))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetPagedResult(Of TEntity)(Solstice.Domain.Models.Page, String, System.Collections.Generic.ICollection(Of System.Data.Common.DbParameter))
  name.vb: GetPagedResult(Of TEntity)(Page, String, ICollection(Of DbParameter))
- uid: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult``1(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetPagedResult``1(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  id: GetPagedResult``1(Solstice.Domain.Models.Page,System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter},Solstice.Repository.Specifications.ICoreSpecifications{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>, ICoreSpecifications<TEntity>)
  nameWithType: ICoreRepository<T>.GetPagedResult<TEntity>(Page, string, ICollection<DbParameter>, ICoreSpecifications<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetPagedResult<TEntity>(Solstice.Domain.Models.Page, string, System.Collections.Generic.ICollection<System.Data.Common.DbParameter>, Solstice.Repository.Specifications.ICoreSpecifications<TEntity>)
  type: Method
  source:
    id: GetPagedResult
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 296
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: 'Task<Paged<TEntity>> GetPagedResult<TEntity>(Page page, string query, ICollection<DbParameter> parameters, ICoreSpecifications<TEntity> coreSpecifications) where TEntity : class'
    parameters:
    - id: page
      type: Solstice.Domain.Models.Page
    - id: query
      type: System.String
    - id: parameters
      type: System.Collections.Generic.ICollection{System.Data.Common.DbParameter}
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{TEntity}}
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{Solstice.Domain.Models.Paged{{TEntity}}}
    content.vb: Function GetPagedResult(Of TEntity As Class)(page As Page, query As String, parameters As ICollection(Of DbParameter), coreSpecifications As ICoreSpecifications(Of TEntity)) As Task(Of Paged(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult*
  nameWithType.vb: ICoreRepository(Of T).GetPagedResult(Of TEntity)(Page, String, ICollection(Of DbParameter), ICoreSpecifications(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetPagedResult(Of TEntity)(Solstice.Domain.Models.Page, String, System.Collections.Generic.ICollection(Of System.Data.Common.DbParameter), Solstice.Repository.Specifications.ICoreSpecifications(Of TEntity))
  name.vb: GetPagedResult(Of TEntity)(Page, String, ICollection(Of DbParameter), ICoreSpecifications(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.PageAllAsync(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.PageAllAsync(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  id: PageAllAsync(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: PageAllAsync(Page, ICoreSpecifications<T>?)
  nameWithType: ICoreRepository<T>.PageAllAsync(Page, ICoreSpecifications<T>?)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.PageAllAsync(Solstice.Domain.Models.Page, Solstice.Repository.Specifications.ICoreSpecifications<T>?)
  type: Method
  source:
    id: PageAllAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 304
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves a collection of entities from the repository that satisfy the specified condition asyncronously, and do paging on them.
  example: []
  syntax:
    content: Task<ICollection<T>> PageAllAsync(Page page, ICoreSpecifications<T>? coreSpecifications)
    parameters:
    - id: page
      type: Solstice.Domain.Models.Page
      description: The page number and size of the entities to be retrieved from the repository.
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{T}}
      description: The specifications that entities must meet to be retrieved from the repository.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{T}}}
      description: >-
        A task that represents the asynchronous operation. The task result contains a collection of entities satisfying the condition.
            or an empty collection if no matches, paged by the given information in RadiantPage object.
    content.vb: Function PageAllAsync(page As Page, coreSpecifications As ICoreSpecifications(Of T)) As Task(Of ICollection(Of T))
  overload: Solstice.Repository.Core.ICoreRepository`1.PageAllAsync*
  nameWithType.vb: ICoreRepository(Of T).PageAllAsync(Page, ICoreSpecifications(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).PageAllAsync(Solstice.Domain.Models.Page, Solstice.Repository.Specifications.ICoreSpecifications(Of T))
  name.vb: PageAllAsync(Page, ICoreSpecifications(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.PageAllQueryable(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.PageAllQueryable(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  id: PageAllQueryable(Solstice.Domain.Models.Page,Solstice.Repository.Specifications.ICoreSpecifications{`0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: PageAllQueryable(Page, ICoreSpecifications<T>?)
  nameWithType: ICoreRepository<T>.PageAllQueryable(Page, ICoreSpecifications<T>?)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.PageAllQueryable(Solstice.Domain.Models.Page, Solstice.Repository.Specifications.ICoreSpecifications<T>?)
  type: Method
  source:
    id: PageAllQueryable
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 312
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves a queryable collection of entities from the repository that satisfy the specified condition asyncronously, and do paging on them.
  example: []
  syntax:
    content: IQueryable<T> PageAllQueryable(Page page, ICoreSpecifications<T>? coreSpecifications)
    parameters:
    - id: page
      type: Solstice.Domain.Models.Page
      description: The page number and size of the entities to be retrieved from the repository.
    - id: coreSpecifications
      type: Solstice.Repository.Specifications.ICoreSpecifications{{T}}
      description: The specifications that entities must meet to be retrieved from the repository.
    return:
      type: System.Linq.IQueryable{{T}}
      description: A queryable collection of all entities in the repository that fulfill the condition, paged by the given information in RadiantPage object.
    content.vb: Function PageAllQueryable(page As Page, coreSpecifications As ICoreSpecifications(Of T)) As IQueryable(Of T)
  overload: Solstice.Repository.Core.ICoreRepository`1.PageAllQueryable*
  nameWithType.vb: ICoreRepository(Of T).PageAllQueryable(Page, ICoreSpecifications(Of T))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).PageAllQueryable(Solstice.Domain.Models.Page, Solstice.Repository.Specifications.ICoreSpecifications(Of T))
  name.vb: PageAllQueryable(Page, ICoreSpecifications(Of T))
- uid: Solstice.Repository.Core.ICoreRepository`1.BeginTransactionAsync
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.BeginTransactionAsync
  id: BeginTransactionAsync
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: BeginTransactionAsync()
  nameWithType: ICoreRepository<T>.BeginTransactionAsync()
  fullName: Solstice.Repository.Core.ICoreRepository<T>.BeginTransactionAsync()
  type: Method
  source:
    id: BeginTransactionAsync
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 325
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Begins a new transaction asynchronously.
  example: []
  syntax:
    content: Task<IDbContextTransaction> BeginTransactionAsync()
    return:
      type: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction}
      description: >-
        A task that represents the asynchronous operation. The task result is an IDbContextTransaction object

        which encapsulates all information about the transaction.
    content.vb: Function BeginTransactionAsync() As Task(Of IDbContextTransaction)
  overload: Solstice.Repository.Core.ICoreRepository`1.BeginTransactionAsync*
  nameWithType.vb: ICoreRepository(Of T).BeginTransactionAsync()
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).BeginTransactionAsync()
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllByQueryable``1(System.Linq.IQueryable{``0})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.GetAllByQueryable``1(System.Linq.IQueryable{``0})
  id: GetAllByQueryable``1(System.Linq.IQueryable{``0})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: GetAllByQueryable<TEntity>(IQueryable<TEntity>)
  nameWithType: ICoreRepository<T>.GetAllByQueryable<TEntity>(IQueryable<TEntity>)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllByQueryable<TEntity>(System.Linq.IQueryable<TEntity>)
  type: Method
  source:
    id: GetAllByQueryable
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 336
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  summary: Retrieves a collection of entities from a specified IQueryable.
  example: []
  syntax:
    content: Task<ICollection<TEntity>> GetAllByQueryable<TEntity>(IQueryable<TEntity> query)
    parameters:
    - id: query
      type: System.Linq.IQueryable{{TEntity}}
      description: An IQueryable that retrieves entities from the repository.
    typeParameters:
    - id: TEntity
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{TEntity}}}
      description: A task that represents the asynchronous operation. The task result contains a collection of entities that satisfy the query or an empty collection if no matches.
    content.vb: Function GetAllByQueryable(Of TEntity)(query As IQueryable(Of TEntity)) As Task(Of ICollection(Of TEntity))
  overload: Solstice.Repository.Core.ICoreRepository`1.GetAllByQueryable*
  nameWithType.vb: ICoreRepository(Of T).GetAllByQueryable(Of TEntity)(IQueryable(Of TEntity))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllByQueryable(Of TEntity)(System.Linq.IQueryable(Of TEntity))
  name.vb: GetAllByQueryable(Of TEntity)(IQueryable(Of TEntity))
- uid: Solstice.Repository.Core.ICoreRepository`1.ExecuteQuery(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  commentId: M:Solstice.Repository.Core.ICoreRepository`1.ExecuteQuery(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  id: ExecuteQuery(System.String,System.Collections.Generic.ICollection{System.Data.Common.DbParameter})
  parent: Solstice.Repository.Core.ICoreRepository`1
  langs:
  - csharp
  - vb
  name: ExecuteQuery(string, ICollection<DbParameter>?)
  nameWithType: ICoreRepository<T>.ExecuteQuery(string, ICollection<DbParameter>?)
  fullName: Solstice.Repository.Core.ICoreRepository<T>.ExecuteQuery(string, System.Collections.Generic.ICollection<System.Data.Common.DbParameter>?)
  type: Method
  source:
    id: ExecuteQuery
    path: /Users/alexandrejournet/Documents/Dev/Solstice/Solstice.Repository/Core/ICoreRepository.cs
    startLine: 337
  assemblies:
  - Solstice.Repository
  namespace: Solstice.Repository.Core
  syntax:
    content: Task ExecuteQuery(string query, ICollection<DbParameter>? dbParameters)
    parameters:
    - id: query
      type: System.String
    - id: dbParameters
      type: System.Collections.Generic.ICollection{System.Data.Common.DbParameter}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function ExecuteQuery(query As String, dbParameters As ICollection(Of DbParameter)) As Task
  overload: Solstice.Repository.Core.ICoreRepository`1.ExecuteQuery*
  nameWithType.vb: ICoreRepository(Of T).ExecuteQuery(String, ICollection(Of DbParameter))
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).ExecuteQuery(String, System.Collections.Generic.ICollection(Of System.Data.Common.DbParameter))
  name.vb: ExecuteQuery(String, ICollection(Of DbParameter))
references:
- uid: Solstice.Repository.Core
  commentId: N:Solstice.Repository.Core
  href: Solstice.html
  name: Solstice.Repository.Core
  nameWithType: Solstice.Repository.Core
  fullName: Solstice.Repository.Core
  spec.csharp:
  - uid: Solstice
    name: Solstice
    href: Solstice.html
  - name: .
  - uid: Solstice.Repository
    name: Repository
    href: Solstice.Repository.html
  - name: .
  - uid: Solstice.Repository.Core
    name: Core
    href: Solstice.Repository.Core.html
  spec.vb:
  - uid: Solstice
    name: Solstice
    href: Solstice.html
  - name: .
  - uid: Solstice.Repository
    name: Repository
    href: Solstice.Repository.html
  - name: .
  - uid: Solstice.Repository.Core
    name: Core
    href: Solstice.Repository.Core.html
- uid: Solstice.Repository.Core.ICoreRepository`1.AddAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.AddAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_AddAsync__0_
  name: AddAsync
  nameWithType: ICoreRepository<T>.AddAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AddAsync
  nameWithType.vb: ICoreRepository(Of T).AddAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AddAsync
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Solstice.Repository.Core.ICoreRepository`1.AddAndSaveAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.AddAndSaveAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_AddAndSaveAsync__0_
  name: AddAndSaveAsync
  nameWithType: ICoreRepository<T>.AddAndSaveAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AddAndSaveAsync
  nameWithType.vb: ICoreRepository(Of T).AddAndSaveAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AddAndSaveAsync
- uid: Solstice.Repository.Core.ICoreRepository`1.AddRangeAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.AddRangeAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_AddRangeAsync_System_Collections_Generic_ICollection__0__
  name: AddRangeAsync
  nameWithType: ICoreRepository<T>.AddRangeAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AddRangeAsync
  nameWithType.vb: ICoreRepository(Of T).AddRangeAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AddRangeAsync
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.ICollection{{TEntity}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<TEntity>
  nameWithType: ICollection<TEntity>
  fullName: System.Collections.Generic.ICollection<TEntity>
  nameWithType.vb: ICollection(Of TEntity)
  fullName.vb: System.Collections.Generic.ICollection(Of TEntity)
  name.vb: ICollection(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: Solstice.Repository.Core.ICoreRepository`1.AddRangeAndSaveAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.AddRangeAndSaveAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_AddRangeAndSaveAsync_System_Collections_Generic_ICollection__0__
  name: AddRangeAndSaveAsync
  nameWithType: ICoreRepository<T>.AddRangeAndSaveAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AddRangeAndSaveAsync
  nameWithType.vb: ICoreRepository(Of T).AddRangeAndSaveAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AddRangeAndSaveAsync
- uid: Solstice.Repository.Core.ICoreRepository`1.Remove*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.Remove
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_Remove__0_
  name: Remove
  nameWithType: ICoreRepository<T>.Remove
  fullName: Solstice.Repository.Core.ICoreRepository<T>.Remove
  nameWithType.vb: ICoreRepository(Of T).Remove
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).Remove
- uid: Solstice.Repository.Core.ICoreRepository`1.RemoveAndSaveAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.RemoveAndSaveAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_RemoveAndSaveAsync__0_
  name: RemoveAndSaveAsync
  nameWithType: ICoreRepository<T>.RemoveAndSaveAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.RemoveAndSaveAsync
  nameWithType.vb: ICoreRepository(Of T).RemoveAndSaveAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).RemoveAndSaveAsync
- uid: Solstice.Repository.Core.ICoreRepository`1.RemoveRange*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.RemoveRange
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_RemoveRange_System_Collections_Generic_ICollection__0__
  name: RemoveRange
  nameWithType: ICoreRepository<T>.RemoveRange
  fullName: Solstice.Repository.Core.ICoreRepository<T>.RemoveRange
  nameWithType.vb: ICoreRepository(Of T).RemoveRange
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).RemoveRange
- uid: Solstice.Repository.Core.ICoreRepository`1.RemoveRangeAndSaveAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.RemoveRangeAndSaveAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_RemoveRangeAndSaveAsync_System_Collections_Generic_ICollection__0__
  name: RemoveRangeAndSaveAsync
  nameWithType: ICoreRepository<T>.RemoveRangeAndSaveAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.RemoveRangeAndSaveAsync
  nameWithType.vb: ICoreRepository(Of T).RemoveRangeAndSaveAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).RemoveRangeAndSaveAsync
- uid: Solstice.Repository.Core.ICoreRepository`1.SaveAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.SaveAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_SaveAsync
  name: SaveAsync
  nameWithType: ICoreRepository<T>.SaveAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.SaveAsync
  nameWithType.vb: ICoreRepository(Of T).SaveAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).SaveAsync
- uid: Solstice.Repository.Core.ICoreRepository`1.Update*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.Update
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_Update__0_
  name: Update
  nameWithType: ICoreRepository<T>.Update
  fullName: Solstice.Repository.Core.ICoreRepository<T>.Update
  nameWithType.vb: ICoreRepository(Of T).Update
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).Update
- uid: Solstice.Repository.Core.ICoreRepository`1.UpdateAndSaveAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.UpdateAndSaveAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_UpdateAndSaveAsync__0_
  name: UpdateAndSaveAsync
  nameWithType: ICoreRepository<T>.UpdateAndSaveAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.UpdateAndSaveAsync
  nameWithType.vb: ICoreRepository(Of T).UpdateAndSaveAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).UpdateAndSaveAsync
- uid: Solstice.Repository.Core.ICoreRepository`1.UpdateRange*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.UpdateRange
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_UpdateRange_System_Collections_Generic_ICollection__0__
  name: UpdateRange
  nameWithType: ICoreRepository<T>.UpdateRange
  fullName: Solstice.Repository.Core.ICoreRepository<T>.UpdateRange
  nameWithType.vb: ICoreRepository(Of T).UpdateRange
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).UpdateRange
- uid: Solstice.Repository.Core.ICoreRepository`1.UpdateRangeAndSaveAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.UpdateRangeAndSaveAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_UpdateRangeAndSaveAsync_System_Collections_Generic_ICollection__0__
  name: UpdateRangeAndSaveAsync
  nameWithType: ICoreRepository<T>.UpdateRangeAndSaveAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.UpdateRangeAndSaveAsync
  nameWithType.vb: ICoreRepository(Of T).UpdateRangeAndSaveAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).UpdateRangeAndSaveAsync
- uid: Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.AnyAsyncBy
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_AnyAsyncBy_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  name: AnyAsyncBy
  nameWithType: ICoreRepository<T>.AnyAsyncBy
  fullName: Solstice.Repository.Core.ICoreRepository<T>.AnyAsyncBy
  nameWithType.vb: ICoreRepository(Of T).AnyAsyncBy
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).AnyAsyncBy
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T, bool>>
  nameWithType: Expression<Func<T, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, bool>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TEntity, bool>>
  nameWithType: Expression<Func<TEntity, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, bool>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: System.Linq.IQueryable{{TEntity}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  name: IQueryable<TEntity>
  nameWithType: IQueryable<TEntity>
  fullName: System.Linq.IQueryable<TEntity>
  nameWithType.vb: IQueryable(Of TEntity)
  fullName.vb: System.Linq.IQueryable(Of TEntity)
  name.vb: IQueryable(Of TEntity)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
- uid: Solstice.Repository.Core.ICoreRepository`1.CountAllAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.CountAllAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_CountAllAsync
  name: CountAllAsync
  nameWithType: ICoreRepository<T>.CountAllAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.CountAllAsync
  nameWithType.vb: ICoreRepository(Of T).CountAllAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).CountAllAsync
- uid: System.Threading.Tasks.Task{System.Decimal}
  commentId: T:System.Threading.Tasks.Task{System.Decimal}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<decimal>
  nameWithType: Task<decimal>
  fullName: System.Threading.Tasks.Task<decimal>
  nameWithType.vb: Task(Of Decimal)
  fullName.vb: System.Threading.Tasks.Task(Of Decimal)
  name.vb: Task(Of Decimal)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Decimal
    name: decimal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.decimal
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.decimal
  - name: )
- uid: Solstice.Repository.Core.ICoreRepository`1.CountAllAsyncBy*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.CountAllAsyncBy
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_CountAllAsyncBy_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  name: CountAllAsyncBy
  nameWithType: ICoreRepository<T>.CountAllAsyncBy
  fullName: Solstice.Repository.Core.ICoreRepository<T>.CountAllAsyncBy
  nameWithType.vb: ICoreRepository(Of T).CountAllAsyncBy
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).CountAllAsyncBy
- uid: Solstice.Repository.Core.ICoreRepository`1.FindAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.FindAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_FindAsync_System_Int32_
  name: FindAsync
  nameWithType: ICoreRepository<T>.FindAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.FindAsync
  nameWithType.vb: ICoreRepository(Of T).FindAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).FindAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task{{TEntity}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: System.Threading.Tasks.Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: Solstice.Repository.Core.ICoreRepository`1.GetBy*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.GetBy
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_GetBy_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  name: GetBy
  nameWithType: ICoreRepository<T>.GetBy
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetBy
  nameWithType.vb: ICoreRepository(Of T).GetBy
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetBy
- uid: Solstice.Repository.Specifications.ICoreSpecifications{{T}}
  commentId: T:Solstice.Repository.Specifications.ICoreSpecifications{`0}
  parent: Solstice.Repository.Specifications
  definition: Solstice.Repository.Specifications.ICoreSpecifications`1
  href: Solstice.Repository.Specifications.ICoreSpecifications-1.html
  name: ICoreSpecifications<T>
  nameWithType: ICoreSpecifications<T>
  fullName: Solstice.Repository.Specifications.ICoreSpecifications<T>
  nameWithType.vb: ICoreSpecifications(Of T)
  fullName.vb: Solstice.Repository.Specifications.ICoreSpecifications(Of T)
  name.vb: ICoreSpecifications(Of T)
  spec.csharp:
  - uid: Solstice.Repository.Specifications.ICoreSpecifications`1
    name: ICoreSpecifications
    href: Solstice.Repository.Specifications.ICoreSpecifications-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Solstice.Repository.Specifications.ICoreSpecifications`1
    name: ICoreSpecifications
    href: Solstice.Repository.Specifications.ICoreSpecifications-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Solstice.Repository.Specifications.ICoreSpecifications`1
  commentId: T:Solstice.Repository.Specifications.ICoreSpecifications`1
  href: Solstice.Repository.Specifications.ICoreSpecifications-1.html
  name: ICoreSpecifications<T>
  nameWithType: ICoreSpecifications<T>
  fullName: Solstice.Repository.Specifications.ICoreSpecifications<T>
  nameWithType.vb: ICoreSpecifications(Of T)
  fullName.vb: Solstice.Repository.Specifications.ICoreSpecifications(Of T)
  name.vb: ICoreSpecifications(Of T)
  spec.csharp:
  - uid: Solstice.Repository.Specifications.ICoreSpecifications`1
    name: ICoreSpecifications
    href: Solstice.Repository.Specifications.ICoreSpecifications-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Solstice.Repository.Specifications.ICoreSpecifications`1
    name: ICoreSpecifications
    href: Solstice.Repository.Specifications.ICoreSpecifications-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Solstice.Repository.Specifications
  commentId: N:Solstice.Repository.Specifications
  href: Solstice.html
  name: Solstice.Repository.Specifications
  nameWithType: Solstice.Repository.Specifications
  fullName: Solstice.Repository.Specifications
  spec.csharp:
  - uid: Solstice
    name: Solstice
    href: Solstice.html
  - name: .
  - uid: Solstice.Repository
    name: Repository
    href: Solstice.Repository.html
  - name: .
  - uid: Solstice.Repository.Specifications
    name: Specifications
    href: Solstice.Repository.Specifications.html
  spec.vb:
  - uid: Solstice
    name: Solstice
    href: Solstice.html
  - name: .
  - uid: Solstice.Repository
    name: Repository
    href: Solstice.Repository.html
  - name: .
  - uid: Solstice.Repository.Specifications
    name: Specifications
    href: Solstice.Repository.Specifications.html
- uid: Solstice.Repository.Specifications.ICoreSpecifications{{TEntity}}
  commentId: T:Solstice.Repository.Specifications.ICoreSpecifications{``0}
  parent: Solstice.Repository.Specifications
  definition: Solstice.Repository.Specifications.ICoreSpecifications`1
  href: Solstice.Repository.Specifications.ICoreSpecifications-1.html
  name: ICoreSpecifications<TEntity>
  nameWithType: ICoreSpecifications<TEntity>
  fullName: Solstice.Repository.Specifications.ICoreSpecifications<TEntity>
  nameWithType.vb: ICoreSpecifications(Of TEntity)
  fullName.vb: Solstice.Repository.Specifications.ICoreSpecifications(Of TEntity)
  name.vb: ICoreSpecifications(Of TEntity)
  spec.csharp:
  - uid: Solstice.Repository.Specifications.ICoreSpecifications`1
    name: ICoreSpecifications
    href: Solstice.Repository.Specifications.ICoreSpecifications-1.html
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: Solstice.Repository.Specifications.ICoreSpecifications`1
    name: ICoreSpecifications
    href: Solstice.Repository.Specifications.ICoreSpecifications-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Collections.Generic.ICollection{System.Data.Common.DbParameter}
  commentId: T:System.Collections.Generic.ICollection{System.Data.Common.DbParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<DbParameter>
  nameWithType: ICollection<DbParameter>
  fullName: System.Collections.Generic.ICollection<System.Data.Common.DbParameter>
  nameWithType.vb: ICollection(Of DbParameter)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Data.Common.DbParameter)
  name.vb: ICollection(Of DbParameter)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.data.common.dbparameter
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.data.common.dbparameter
  - name: )
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.GetAllAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_GetAllAsync
  name: GetAllAsync
  nameWithType: ICoreRepository<T>.GetAllAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllAsync
  nameWithType.vb: ICoreRepository(Of T).GetAllAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.ICollection{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ICollection<T>>
  nameWithType: Task<ICollection<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.ICollection<T>>
  nameWithType.vb: Task(Of ICollection(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.ICollection(Of T))
  name.vb: Task(Of ICollection(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.ICollection{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ICollection<TEntity>>
  nameWithType: Task<ICollection<TEntity>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TEntity>>
  nameWithType.vb: Task(Of ICollection(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.ICollection(Of TEntity))
  name.vb: Task(Of ICollection(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.GetAllQueryable
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_GetAllQueryable
  name: GetAllQueryable
  nameWithType: ICoreRepository<T>.GetAllQueryable
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllQueryable
  nameWithType.vb: ICoreRepository(Of T).GetAllQueryable
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllQueryable
- uid: System.Linq.IQueryable{{T}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Solstice.Repository.Core.ICoreRepository`1.GetPagedResult*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.GetPagedResult
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_GetPagedResult_Solstice_Domain_Models_Page_
  name: GetPagedResult
  nameWithType: ICoreRepository<T>.GetPagedResult
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetPagedResult
  nameWithType.vb: ICoreRepository(Of T).GetPagedResult
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetPagedResult
- uid: Solstice.Domain.Models.Page
  commentId: T:Solstice.Domain.Models.Page
  parent: Solstice.Domain.Models
  name: Page
  nameWithType: Page
  fullName: Solstice.Domain.Models.Page
- uid: System.Threading.Tasks.Task{Solstice.Domain.Models.Paged{{T}}}
  commentId: T:System.Threading.Tasks.Task{Solstice.Domain.Models.Paged{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Paged<T>>
  nameWithType: Task<Paged<T>>
  fullName: System.Threading.Tasks.Task<Solstice.Domain.Models.Paged<T>>
  nameWithType.vb: Task(Of Paged(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of Solstice.Domain.Models.Paged(Of T))
  name.vb: Task(Of Paged(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Solstice.Domain.Models.Paged`1
    name: Paged
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Solstice.Domain.Models.Paged`1
    name: Paged
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Solstice.Domain.Models
  commentId: N:Solstice.Domain.Models
  name: Solstice.Domain.Models
  nameWithType: Solstice.Domain.Models
  fullName: Solstice.Domain.Models
  spec.csharp:
  - uid: Solstice
    name: Solstice
  - name: .
  - uid: Solstice.Domain
    name: Domain
  - name: .
  - uid: Solstice.Domain.Models
    name: Models
  spec.vb:
  - uid: Solstice
    name: Solstice
  - name: .
  - uid: Solstice.Domain
    name: Domain
  - name: .
  - uid: Solstice.Domain.Models
    name: Models
- uid: System.Threading.Tasks.Task{Solstice.Domain.Models.Paged{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{Solstice.Domain.Models.Paged{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Paged<TEntity>>
  nameWithType: Task<Paged<TEntity>>
  fullName: System.Threading.Tasks.Task<Solstice.Domain.Models.Paged<TEntity>>
  nameWithType.vb: Task(Of Paged(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of Solstice.Domain.Models.Paged(Of TEntity))
  name.vb: Task(Of Paged(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Solstice.Domain.Models.Paged`1
    name: Paged
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Solstice.Domain.Models.Paged`1
    name: Paged
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
- uid: Solstice.Repository.Core.ICoreRepository`1.PageAllAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.PageAllAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_PageAllAsync_Solstice_Domain_Models_Page_Solstice_Repository_Specifications_ICoreSpecifications__0__
  name: PageAllAsync
  nameWithType: ICoreRepository<T>.PageAllAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.PageAllAsync
  nameWithType.vb: ICoreRepository(Of T).PageAllAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).PageAllAsync
- uid: Solstice.Repository.Core.ICoreRepository`1.PageAllQueryable*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.PageAllQueryable
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_PageAllQueryable_Solstice_Domain_Models_Page_Solstice_Repository_Specifications_ICoreSpecifications__0__
  name: PageAllQueryable
  nameWithType: ICoreRepository<T>.PageAllQueryable
  fullName: Solstice.Repository.Core.ICoreRepository<T>.PageAllQueryable
  nameWithType.vb: ICoreRepository(Of T).PageAllQueryable
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).PageAllQueryable
- uid: Solstice.Repository.Core.ICoreRepository`1.BeginTransactionAsync*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.BeginTransactionAsync
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_BeginTransactionAsync
  name: BeginTransactionAsync
  nameWithType: ICoreRepository<T>.BeginTransactionAsync
  fullName: Solstice.Repository.Core.ICoreRepository<T>.BeginTransactionAsync
  nameWithType.vb: ICoreRepository(Of T).BeginTransactionAsync
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).BeginTransactionAsync
- uid: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction}
  commentId: T:System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IDbContextTransaction>
  nameWithType: Task<IDbContextTransaction>
  fullName: System.Threading.Tasks.Task<Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction>
  nameWithType.vb: Task(Of IDbContextTransaction)
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Task(Of IDbContextTransaction)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.storage.idbcontexttransaction
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.storage.idbcontexttransaction
  - name: )
- uid: Solstice.Repository.Core.ICoreRepository`1.GetAllByQueryable*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.GetAllByQueryable
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_GetAllByQueryable__1_System_Linq_IQueryable___0__
  name: GetAllByQueryable
  nameWithType: ICoreRepository<T>.GetAllByQueryable
  fullName: Solstice.Repository.Core.ICoreRepository<T>.GetAllByQueryable
  nameWithType.vb: ICoreRepository(Of T).GetAllByQueryable
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).GetAllByQueryable
- uid: Solstice.Repository.Core.ICoreRepository`1.ExecuteQuery*
  commentId: Overload:Solstice.Repository.Core.ICoreRepository`1.ExecuteQuery
  href: Solstice.Repository.Core.ICoreRepository-1.html#Solstice_Repository_Core_ICoreRepository_1_ExecuteQuery_System_String_System_Collections_Generic_ICollection_System_Data_Common_DbParameter__
  name: ExecuteQuery
  nameWithType: ICoreRepository<T>.ExecuteQuery
  fullName: Solstice.Repository.Core.ICoreRepository<T>.ExecuteQuery
  nameWithType.vb: ICoreRepository(Of T).ExecuteQuery
  fullName.vb: Solstice.Repository.Core.ICoreRepository(Of T).ExecuteQuery
